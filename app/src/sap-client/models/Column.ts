// tslint:disable
/**
 * SOFI
 * SOFI Sekvensanalyseplatform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Organization,
    OrganizationFromJSON,
    OrganizationToJSON,
} from './';

/**
 * 
 * @export
 * @interface Column
 */
export interface Column  {
    /**
     * True if the column can be approved
     * @type {boolean}
     * @memberof Column
     */
    approvable?: boolean;
    /**
     * True if the column can be edited
     * @type {boolean}
     * @memberof Column
     */
    editable?: boolean;
    /**
     * Format for editable fields. Not required.
     * @type {string}
     * @memberof Column
     */
    editable_format?: string;
    /**
     * True if the column should be restricted to viewing only by the institution that owns it
     * @type {boolean}
     * @memberof Column
     */
    pii?: boolean;
    /**
     * True if the column should be treated as a \'gdpr\' column, subject to more strict auditing/logging
     * @type {boolean}
     * @memberof Column
     */
    gdpr?: boolean;
    /**
     * True if the column is programmatically calculated by SOFI. Such columns can be approvable in the sense of being transferred to a metadata service as part of an approval, but should not be thought of as \'selectable\' or capable of any user-side manipulation. 
     * @type {boolean}
     * @memberof Column
     */
    computed?: boolean;
    /**
     * List of organizations/institutions who \'own\' or should have unrestricted access to this field
     * @type {Array<Organization>}
     * @memberof Column
     */
    organizations?: Array<Organization>;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    field_name?: string;
    /**
     * List of other columns, if any, that should be sent along when this column gets approved
     * @type {Array<string>}
     * @memberof Column
     */
    approves_with?: Array<string>;
    /**
     * True if the column can be edited by users from other organizations
     * @type {boolean}
     * @memberof Column
     */
    cross_org_editable?: boolean;
}

export function ColumnFromJSON(json: any): Column {
    return {
        'approvable': !exists(json, 'approvable') ? undefined : json['approvable'],
        'editable': !exists(json, 'editable') ? undefined : json['editable'],
        'editable_format': !exists(json, 'editable_format') ? undefined : json['editable_format'],
        'pii': !exists(json, 'pii') ? undefined : json['pii'],
        'gdpr': !exists(json, 'gdpr') ? undefined : json['gdpr'],
        'computed': !exists(json, 'computed') ? undefined : json['computed'],
        'organizations': !exists(json, 'organizations') ? undefined : (json['organizations'] as Array<any>).map(OrganizationFromJSON),
        'field_name': !exists(json, 'field_name') ? undefined : json['field_name'],
        'approves_with': !exists(json, 'approves_with') ? undefined : json['approves_with'],
        'cross_org_editable': !exists(json, 'cross_org_editable') ? undefined : json['cross_org_editable'],
    };
}

export function ColumnToJSON(value?: Column): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'approvable': value.approvable,
        'editable': value.editable,
        'editable_format': value.editable_format,
        'pii': value.pii,
        'gdpr': value.gdpr,
        'computed': value.computed,
        'organizations': value.organizations === undefined ? undefined : (value.organizations as Array<any>).map(OrganizationToJSON),
        'field_name': value.field_name,
        'approves_with': value.approves_with,
        'cross_org_editable': value.cross_org_editable,
    };
}


