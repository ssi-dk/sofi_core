// tslint:disable
/**
 * SOFI
 * SOFI Sekvensanalyseplatform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    AnalysisHistory,
    AnalysisHistoryFromJSON,
    AnalysisHistoryToJSON,
    AnalysisQuery,
    AnalysisQueryFromJSON,
    AnalysisQueryToJSON,
    AnalysisResult,
    AnalysisResultFromJSON,
    AnalysisResultToJSON,
    Column,
    ColumnFromJSON,
    ColumnToJSON,
    MetadataReloadRequest,
    MetadataReloadRequestFromJSON,
    MetadataReloadRequestToJSON,
    MetadataReloadResponse,
    MetadataReloadResponseFromJSON,
    MetadataReloadResponseToJSON,
    PageOfAnalysis,
    PageOfAnalysisFromJSON,
    PageOfAnalysisToJSON,
} from '../models';

export interface GetAnalysisRequest {
    pagingToken?: string;
    pageSize?: number;
    sortingColumn?: string;
    sortingAscending?: boolean;
}

export interface GetAnalysisHistoryRequest {
    isolateId: string;
}

export interface GetSequenceByIdRequest {
    sequenceId: string;
}

export interface ReloadMetadataRequest {
    body?: MetadataReloadRequest;
}

export interface SearchAnalysisRequest {
    query?: AnalysisQuery;
}

export interface SubmitChangesRequest {
    body?: { [key: string]: { [key: string]: string; }; };
}


/**
 * Page through all the analysis in the system
 */
function getAnalysisRaw<T>(requestParameters: GetAnalysisRequest, requestConfig: runtime.TypedQueryConfig<T, PageOfAnalysis> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.pagingToken !== undefined) {
        queryParameters['paging_token'] = requestParameters.pagingToken;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['page_size'] = requestParameters.pageSize;
    }


    if (requestParameters.sortingColumn !== undefined) {
        queryParameters['sorting_column'] = requestParameters.sortingColumn;
    }


    if (requestParameters.sortingAscending !== undefined) {
        queryParameters['sorting_ascending'] = requestParameters.sortingAscending;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/analysis`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PageOfAnalysisFromJSON(body), text);
    }

    return config;
}

/**
* Page through all the analysis in the system
*/
export function getAnalysis<T>(requestParameters: GetAnalysisRequest, requestConfig?: runtime.TypedQueryConfig<T, PageOfAnalysis>): QueryConfig<T> {
    return getAnalysisRaw(requestParameters, requestConfig);
}

/**
 * Get analysis history by isolate_id
 */
function getAnalysisHistoryRaw<T>(requestParameters: GetAnalysisHistoryRequest, requestConfig: runtime.TypedQueryConfig<T, AnalysisHistory> = {}): QueryConfig<T> {
    if (requestParameters.isolateId === null || requestParameters.isolateId === undefined) {
        throw new runtime.RequiredError('isolateId','Required parameter requestParameters.isolateId was null or undefined when calling getAnalysisHistory.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/analysis-history/{isolate_id}`.replace(`{${"isolate_id"}}`, encodeURIComponent(String(requestParameters.isolateId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AnalysisHistoryFromJSON(body), text);
    }

    return config;
}

/**
* Get analysis history by isolate_id
*/
export function getAnalysisHistory<T>(requestParameters: GetAnalysisHistoryRequest, requestConfig?: runtime.TypedQueryConfig<T, AnalysisHistory>): QueryConfig<T> {
    return getAnalysisHistoryRaw(requestParameters, requestConfig);
}

/**
 * Get column metadata, scoped to authenticated user
 */
function getColumnsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Column>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/analysis/columns`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ColumnFromJSON), text);
    }

    return config;
}

/**
* Get column metadata, scoped to authenticated user
*/
export function getColumns<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Column>>): QueryConfig<T> {
    return getColumnsRaw( requestConfig);
}

/**
 * Get an individual analysis result by sequence_id
 */
function getSequenceByIdRaw<T>(requestParameters: GetSequenceByIdRequest, requestConfig: runtime.TypedQueryConfig<T, AnalysisResult> = {}): QueryConfig<T> {
    if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {
        throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling getSequenceById.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.sequenceId !== undefined) {
        queryParameters['sequence_id'] = requestParameters.sequenceId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/analysis/by_id`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AnalysisResultFromJSON(body), text);
    }

    return config;
}

/**
* Get an individual analysis result by sequence_id
*/
export function getSequenceById<T>(requestParameters: GetSequenceByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, AnalysisResult>): QueryConfig<T> {
    return getSequenceByIdRaw(requestParameters, requestConfig);
}

/**
 * Reload metadata for a given isolate
 */
function reloadMetadataRaw<T>(requestParameters: ReloadMetadataRequest, requestConfig: runtime.TypedQueryConfig<T, MetadataReloadResponse> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/analysis/reload_metadata`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || MetadataReloadRequestToJSON(requestParameters.body),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MetadataReloadResponseFromJSON(body), text);
    }

    return config;
}

/**
* Reload metadata for a given isolate
*/
export function reloadMetadata<T>(requestParameters: ReloadMetadataRequest, requestConfig?: runtime.TypedQueryConfig<T, MetadataReloadResponse>): QueryConfig<T> {
    return reloadMetadataRaw(requestParameters, requestConfig);
}

/**
 * Search all analysis by given query
 */
function searchAnalysisRaw<T>(requestParameters: SearchAnalysisRequest, requestConfig: runtime.TypedQueryConfig<T, PageOfAnalysis> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/analysis`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AnalysisQueryToJSON(requestParameters.query),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PageOfAnalysisFromJSON(body), text);
    }

    return config;
}

/**
* Search all analysis by given query
*/
export function searchAnalysis<T>(requestParameters: SearchAnalysisRequest, requestConfig?: runtime.TypedQueryConfig<T, PageOfAnalysis>): QueryConfig<T> {
    return searchAnalysisRaw(requestParameters, requestConfig);
}

/**
 * Submit a batch of analysis data changes
 */
function submitChangesRaw<T>(requestParameters: SubmitChangesRequest, requestConfig: runtime.TypedQueryConfig<T, { [key: string]: { [key: string]: string; }; }> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/analysis/changes`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || requestParameters.body,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Submit a batch of analysis data changes
*/
export function submitChanges<T>(requestParameters: SubmitChangesRequest, requestConfig?: runtime.TypedQueryConfig<T, { [key: string]: { [key: string]: string; }; }>): QueryConfig<T> {
    return submitChangesRaw(requestParameters, requestConfig);
}

