# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated import util


class AnalysisSorting(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, column=None, ascending=None):  # noqa: E501
        """AnalysisSorting - a model defined in OpenAPI

        :param column: The column of this AnalysisSorting.  # noqa: E501
        :type column: str
        :param ascending: The ascending of this AnalysisSorting.  # noqa: E501
        :type ascending: bool
        """
        self.openapi_types = {
            'column': str,
            'ascending': bool,
        }

        self.attribute_map = {
            'column': 'column',
            'ascending': 'ascending',
        }

        self._column = column
        self._ascending = ascending

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalysisSorting of this AnalysisSorting.  # noqa: E501
        :rtype: AnalysisSorting
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self):
        """Gets the column of this AnalysisSorting.

        Name of the column to sort  # noqa: E501

        :return: The column of this AnalysisSorting.
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this AnalysisSorting.

        Name of the column to sort  # noqa: E501

        :param column: The column of this AnalysisSorting.
        :type column: str
        """

        self._column = column

    @property
    def ascending(self):
        """Gets the ascending of this AnalysisSorting.


        :return: The ascending of this AnalysisSorting.
        :rtype: bool
        """
        return self._ascending

    @ascending.setter
    def ascending(self, ascending):
        """Sets the ascending of this AnalysisSorting.


        :param ascending: The ascending of this AnalysisSorting.
        :type ascending: bool
        """

        self._ascending = ascending
