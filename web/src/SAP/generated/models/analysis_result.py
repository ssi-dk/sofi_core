# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated.models.analysis_result_all_of import AnalysisResultAllOf
from web.src.SAP.generated.models.analysis_result_all_of_qc_failed_tests import AnalysisResultAllOfQcFailedTests
from web.src.SAP.generated.models.base_metadata import BaseMetadata
from web.src.SAP.generated.models.lims_specific_metadata import LimsSpecificMetadata
from web.src.SAP.generated.models.organization import Organization
from web.src.SAP.generated.models.resistance import Resistance
from web.src.SAP.generated.models.tbr_specific_metadata import TbrSpecificMetadata
from web.src.SAP.generated import util

from web.src.SAP.generated.models.analysis_result_all_of import AnalysisResultAllOf  # noqa: E501
from web.src.SAP.generated.models.analysis_result_all_of_qc_failed_tests import AnalysisResultAllOfQcFailedTests  # noqa: E501
from web.src.SAP.generated.models.base_metadata import BaseMetadata  # noqa: E501
from web.src.SAP.generated.models.lims_specific_metadata import LimsSpecificMetadata  # noqa: E501
from web.src.SAP.generated.models.organization import Organization  # noqa: E501
from web.src.SAP.generated.models.resistance import Resistance  # noqa: E501
from web.src.SAP.generated.models.tbr_specific_metadata import TbrSpecificMetadata  # noqa: E501

class AnalysisResult(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, id=None, sequence_id=None, sequence_filename=None, isolate_id=None, institution=None, project_number=None, project_title=None, date_sample=None, date_received=None, date_sofi=None, run_id=None, public_number=None, primary_isolate=None, chr_number=None, cvr_number=None, aut_number=None, product_type=None, product=None, origin_country=None, animal_species=None, sample_info=None, cpr_nr=None, gender=None, name=None, age=None, travel=None, travel_country=None, date_run=None, date_received_kma=None, kma=None, region=None, fud_number=None, cluster_id=None, date_epi=None, latest_for_isolate=None, resfinder_version=None, date_analysis_sofi=None, date_approved_serotype=None, date_approved_qc=None, date_approved_amr=None, date_approved_st=None, date_approved_toxin=None, date_approved_cluster=None, date_approved_cdiff=None, qc_provided_species=None, qc_genome1x=None, qc_genome10x=None, qc_gsize_diff1x10=None, qc_avg_coverage=None, qc_final=None, qc_action=None, qc_num_contigs=None, qc_ambiguous_sites=None, qc_num_reads=None, qc_main_sp_plus_uncl=None, qc_unclassified_reads=None, qc_db_id=None, qc_db_id2=None, qc_failed_tests=None, call_percent=None, multiple_alleles=None, subspecies=None, species_final=None, st=None, st_final=None, st_alleles=None, pathotype=None, pathotype_final=None, sero_enterobase=None, sero_seqsero=None, sero_antigen_seqsero=None, sero_d_tartrate=None, sero_serotype_finder=None, serotype_final=None, adhesion_final=None, virulence_genes=None, toxins_final=None, infection_source=None, resistance_genes=None, amr_profile=None, comment=None, comment_cluster=None, comment_general=None, comment_supplementary=None, comment_qc=None, amr_ami=None, amr_amp=None, amr_azi=None, amr_fep=None, amr_fot=None, amr_f_c=None, amr_fox=None, amr_taz=None, amr_t_c=None, amr_chl=None, amr_cip=None, amr_cli=None, amr_col=None, amr_dap=None, amr_etp=None, amr_ery=None, amr_fus=None, amr_gen=None, amr_imi=None, amr_kan=None, amr_lzd=None, amr_mero=None, amr_mup=None, amr_nal=None, amr_pen=None, amr_syn=None, amr_rif=None, amr_str=None, amr_sul=None, amr_tei=None, amr_trm=None, amr_tet=None, amr_tia=None, amr_tgc=None, amr_tmp=None, amr_van=None, cgmlst_schema=None, trst=None, tcda=None, tcdb=None, cdta_cdtb=None, del_117=None, a117t=None, cdiff_details=None, adhaesion=None, toxin=None, toxin_details=None, bifrost_min_read_check=None, bifrost_whats_my_species=None, bifrost_assemblatron=None, bifrost_assembly_qc=None, bifrost_ssi_stamper=None, bifrost_cge_mlst=None, bifrost_cge_resfinder=None, bifrost_seqsero=None, bifrost_enterobase=None, bifrost_salmonella_subspecies_dtartrate=None, bifrost_chewbbaca=None, bifrost_sp_ecoli=None, bifrost_sp_cdiff=None, bifrost_amrfinderplus=None):  # noqa: E501
        """AnalysisResult - a model defined in OpenAPI

        :param id: The id of this AnalysisResult.  # noqa: E501
        :type id: str
        :param sequence_id: The sequence_id of this AnalysisResult.  # noqa: E501
        :type sequence_id: str
        :param sequence_filename: The sequence_filename of this AnalysisResult.  # noqa: E501
        :type sequence_filename: str
        :param isolate_id: The isolate_id of this AnalysisResult.  # noqa: E501
        :type isolate_id: str
        :param institution: The institution of this AnalysisResult.  # noqa: E501
        :type institution: Organization
        :param project_number: The project_number of this AnalysisResult.  # noqa: E501
        :type project_number: str
        :param project_title: The project_title of this AnalysisResult.  # noqa: E501
        :type project_title: str
        :param date_sample: The date_sample of this AnalysisResult.  # noqa: E501
        :type date_sample: datetime
        :param date_received: The date_received of this AnalysisResult.  # noqa: E501
        :type date_received: datetime
        :param date_sofi: The date_sofi of this AnalysisResult.  # noqa: E501
        :type date_sofi: datetime
        :param run_id: The run_id of this AnalysisResult.  # noqa: E501
        :type run_id: str
        :param public_number: The public_number of this AnalysisResult.  # noqa: E501
        :type public_number: str
        :param primary_isolate: The primary_isolate of this AnalysisResult.  # noqa: E501
        :type primary_isolate: bool
        :param chr_number: The chr_number of this AnalysisResult.  # noqa: E501
        :type chr_number: str
        :param cvr_number: The cvr_number of this AnalysisResult.  # noqa: E501
        :type cvr_number: str
        :param aut_number: The aut_number of this AnalysisResult.  # noqa: E501
        :type aut_number: str
        :param product_type: The product_type of this AnalysisResult.  # noqa: E501
        :type product_type: str
        :param product: The product of this AnalysisResult.  # noqa: E501
        :type product: str
        :param origin_country: The origin_country of this AnalysisResult.  # noqa: E501
        :type origin_country: str
        :param animal_species: The animal_species of this AnalysisResult.  # noqa: E501
        :type animal_species: str
        :param sample_info: The sample_info of this AnalysisResult.  # noqa: E501
        :type sample_info: str
        :param cpr_nr: The cpr_nr of this AnalysisResult.  # noqa: E501
        :type cpr_nr: str
        :param gender: The gender of this AnalysisResult.  # noqa: E501
        :type gender: str
        :param name: The name of this AnalysisResult.  # noqa: E501
        :type name: str
        :param age: The age of this AnalysisResult.  # noqa: E501
        :type age: int
        :param travel: The travel of this AnalysisResult.  # noqa: E501
        :type travel: str
        :param travel_country: The travel_country of this AnalysisResult.  # noqa: E501
        :type travel_country: str
        :param date_run: The date_run of this AnalysisResult.  # noqa: E501
        :type date_run: datetime
        :param date_received_kma: The date_received_kma of this AnalysisResult.  # noqa: E501
        :type date_received_kma: datetime
        :param kma: The kma of this AnalysisResult.  # noqa: E501
        :type kma: str
        :param region: The region of this AnalysisResult.  # noqa: E501
        :type region: str
        :param fud_number: The fud_number of this AnalysisResult.  # noqa: E501
        :type fud_number: str
        :param cluster_id: The cluster_id of this AnalysisResult.  # noqa: E501
        :type cluster_id: str
        :param date_epi: The date_epi of this AnalysisResult.  # noqa: E501
        :type date_epi: str
        :param latest_for_isolate: The latest_for_isolate of this AnalysisResult.  # noqa: E501
        :type latest_for_isolate: str
        :param resfinder_version: The resfinder_version of this AnalysisResult.  # noqa: E501
        :type resfinder_version: str
        :param date_analysis_sofi: The date_analysis_sofi of this AnalysisResult.  # noqa: E501
        :type date_analysis_sofi: datetime
        :param date_approved_serotype: The date_approved_serotype of this AnalysisResult.  # noqa: E501
        :type date_approved_serotype: datetime
        :param date_approved_qc: The date_approved_qc of this AnalysisResult.  # noqa: E501
        :type date_approved_qc: datetime
        :param date_approved_amr: The date_approved_amr of this AnalysisResult.  # noqa: E501
        :type date_approved_amr: datetime
        :param date_approved_st: The date_approved_st of this AnalysisResult.  # noqa: E501
        :type date_approved_st: datetime
        :param date_approved_toxin: The date_approved_toxin of this AnalysisResult.  # noqa: E501
        :type date_approved_toxin: datetime
        :param date_approved_cluster: The date_approved_cluster of this AnalysisResult.  # noqa: E501
        :type date_approved_cluster: datetime
        :param date_approved_cdiff: The date_approved_cdiff of this AnalysisResult.  # noqa: E501
        :type date_approved_cdiff: datetime
        :param qc_provided_species: The qc_provided_species of this AnalysisResult.  # noqa: E501
        :type qc_provided_species: str
        :param qc_genome1x: The qc_genome1x of this AnalysisResult.  # noqa: E501
        :type qc_genome1x: float
        :param qc_genome10x: The qc_genome10x of this AnalysisResult.  # noqa: E501
        :type qc_genome10x: float
        :param qc_gsize_diff1x10: The qc_gsize_diff1x10 of this AnalysisResult.  # noqa: E501
        :type qc_gsize_diff1x10: float
        :param qc_avg_coverage: The qc_avg_coverage of this AnalysisResult.  # noqa: E501
        :type qc_avg_coverage: float
        :param qc_final: The qc_final of this AnalysisResult.  # noqa: E501
        :type qc_final: str
        :param qc_action: The qc_action of this AnalysisResult.  # noqa: E501
        :type qc_action: str
        :param qc_num_contigs: The qc_num_contigs of this AnalysisResult.  # noqa: E501
        :type qc_num_contigs: float
        :param qc_ambiguous_sites: The qc_ambiguous_sites of this AnalysisResult.  # noqa: E501
        :type qc_ambiguous_sites: float
        :param qc_num_reads: The qc_num_reads of this AnalysisResult.  # noqa: E501
        :type qc_num_reads: float
        :param qc_main_sp_plus_uncl: The qc_main_sp_plus_uncl of this AnalysisResult.  # noqa: E501
        :type qc_main_sp_plus_uncl: float
        :param qc_unclassified_reads: The qc_unclassified_reads of this AnalysisResult.  # noqa: E501
        :type qc_unclassified_reads: float
        :param qc_db_id: The qc_db_id of this AnalysisResult.  # noqa: E501
        :type qc_db_id: str
        :param qc_db_id2: The qc_db_id2 of this AnalysisResult.  # noqa: E501
        :type qc_db_id2: str
        :param qc_failed_tests: The qc_failed_tests of this AnalysisResult.  # noqa: E501
        :type qc_failed_tests: List[AnalysisResultAllOfQcFailedTests]
        :param call_percent: The call_percent of this AnalysisResult.  # noqa: E501
        :type call_percent: float
        :param multiple_alleles: The multiple_alleles of this AnalysisResult.  # noqa: E501
        :type multiple_alleles: float
        :param subspecies: The subspecies of this AnalysisResult.  # noqa: E501
        :type subspecies: str
        :param species_final: The species_final of this AnalysisResult.  # noqa: E501
        :type species_final: str
        :param st: The st of this AnalysisResult.  # noqa: E501
        :type st: str
        :param st_final: The st_final of this AnalysisResult.  # noqa: E501
        :type st_final: int
        :param st_alleles: The st_alleles of this AnalysisResult.  # noqa: E501
        :type st_alleles: object
        :param pathotype: The pathotype of this AnalysisResult.  # noqa: E501
        :type pathotype: str
        :param pathotype_final: The pathotype_final of this AnalysisResult.  # noqa: E501
        :type pathotype_final: str
        :param sero_enterobase: The sero_enterobase of this AnalysisResult.  # noqa: E501
        :type sero_enterobase: str
        :param sero_seqsero: The sero_seqsero of this AnalysisResult.  # noqa: E501
        :type sero_seqsero: str
        :param sero_antigen_seqsero: The sero_antigen_seqsero of this AnalysisResult.  # noqa: E501
        :type sero_antigen_seqsero: str
        :param sero_d_tartrate: The sero_d_tartrate of this AnalysisResult.  # noqa: E501
        :type sero_d_tartrate: str
        :param sero_serotype_finder: The sero_serotype_finder of this AnalysisResult.  # noqa: E501
        :type sero_serotype_finder: str
        :param serotype_final: The serotype_final of this AnalysisResult.  # noqa: E501
        :type serotype_final: str
        :param adhesion_final: The adhesion_final of this AnalysisResult.  # noqa: E501
        :type adhesion_final: str
        :param virulence_genes: The virulence_genes of this AnalysisResult.  # noqa: E501
        :type virulence_genes: str
        :param toxins_final: The toxins_final of this AnalysisResult.  # noqa: E501
        :type toxins_final: str
        :param infection_source: The infection_source of this AnalysisResult.  # noqa: E501
        :type infection_source: str
        :param resistance_genes: The resistance_genes of this AnalysisResult.  # noqa: E501
        :type resistance_genes: str
        :param amr_profile: The amr_profile of this AnalysisResult.  # noqa: E501
        :type amr_profile: str
        :param comment: The comment of this AnalysisResult.  # noqa: E501
        :type comment: str
        :param comment_cluster: The comment_cluster of this AnalysisResult.  # noqa: E501
        :type comment_cluster: str
        :param comment_general: The comment_general of this AnalysisResult.  # noqa: E501
        :type comment_general: str
        :param comment_supplementary: The comment_supplementary of this AnalysisResult.  # noqa: E501
        :type comment_supplementary: str
        :param comment_qc: The comment_qc of this AnalysisResult.  # noqa: E501
        :type comment_qc: str
        :param amr_ami: The amr_ami of this AnalysisResult.  # noqa: E501
        :type amr_ami: Resistance
        :param amr_amp: The amr_amp of this AnalysisResult.  # noqa: E501
        :type amr_amp: Resistance
        :param amr_azi: The amr_azi of this AnalysisResult.  # noqa: E501
        :type amr_azi: Resistance
        :param amr_fep: The amr_fep of this AnalysisResult.  # noqa: E501
        :type amr_fep: Resistance
        :param amr_fot: The amr_fot of this AnalysisResult.  # noqa: E501
        :type amr_fot: Resistance
        :param amr_f_c: The amr_f_c of this AnalysisResult.  # noqa: E501
        :type amr_f_c: Resistance
        :param amr_fox: The amr_fox of this AnalysisResult.  # noqa: E501
        :type amr_fox: Resistance
        :param amr_taz: The amr_taz of this AnalysisResult.  # noqa: E501
        :type amr_taz: Resistance
        :param amr_t_c: The amr_t_c of this AnalysisResult.  # noqa: E501
        :type amr_t_c: Resistance
        :param amr_chl: The amr_chl of this AnalysisResult.  # noqa: E501
        :type amr_chl: Resistance
        :param amr_cip: The amr_cip of this AnalysisResult.  # noqa: E501
        :type amr_cip: Resistance
        :param amr_cli: The amr_cli of this AnalysisResult.  # noqa: E501
        :type amr_cli: Resistance
        :param amr_col: The amr_col of this AnalysisResult.  # noqa: E501
        :type amr_col: Resistance
        :param amr_dap: The amr_dap of this AnalysisResult.  # noqa: E501
        :type amr_dap: Resistance
        :param amr_etp: The amr_etp of this AnalysisResult.  # noqa: E501
        :type amr_etp: Resistance
        :param amr_ery: The amr_ery of this AnalysisResult.  # noqa: E501
        :type amr_ery: Resistance
        :param amr_fus: The amr_fus of this AnalysisResult.  # noqa: E501
        :type amr_fus: Resistance
        :param amr_gen: The amr_gen of this AnalysisResult.  # noqa: E501
        :type amr_gen: Resistance
        :param amr_imi: The amr_imi of this AnalysisResult.  # noqa: E501
        :type amr_imi: Resistance
        :param amr_kan: The amr_kan of this AnalysisResult.  # noqa: E501
        :type amr_kan: Resistance
        :param amr_lzd: The amr_lzd of this AnalysisResult.  # noqa: E501
        :type amr_lzd: Resistance
        :param amr_mero: The amr_mero of this AnalysisResult.  # noqa: E501
        :type amr_mero: Resistance
        :param amr_mup: The amr_mup of this AnalysisResult.  # noqa: E501
        :type amr_mup: Resistance
        :param amr_nal: The amr_nal of this AnalysisResult.  # noqa: E501
        :type amr_nal: Resistance
        :param amr_pen: The amr_pen of this AnalysisResult.  # noqa: E501
        :type amr_pen: Resistance
        :param amr_syn: The amr_syn of this AnalysisResult.  # noqa: E501
        :type amr_syn: Resistance
        :param amr_rif: The amr_rif of this AnalysisResult.  # noqa: E501
        :type amr_rif: Resistance
        :param amr_str: The amr_str of this AnalysisResult.  # noqa: E501
        :type amr_str: Resistance
        :param amr_sul: The amr_sul of this AnalysisResult.  # noqa: E501
        :type amr_sul: Resistance
        :param amr_tei: The amr_tei of this AnalysisResult.  # noqa: E501
        :type amr_tei: Resistance
        :param amr_trm: The amr_trm of this AnalysisResult.  # noqa: E501
        :type amr_trm: Resistance
        :param amr_tet: The amr_tet of this AnalysisResult.  # noqa: E501
        :type amr_tet: Resistance
        :param amr_tia: The amr_tia of this AnalysisResult.  # noqa: E501
        :type amr_tia: Resistance
        :param amr_tgc: The amr_tgc of this AnalysisResult.  # noqa: E501
        :type amr_tgc: Resistance
        :param amr_tmp: The amr_tmp of this AnalysisResult.  # noqa: E501
        :type amr_tmp: Resistance
        :param amr_van: The amr_van of this AnalysisResult.  # noqa: E501
        :type amr_van: Resistance
        :param cgmlst_schema: The cgmlst_schema of this AnalysisResult.  # noqa: E501
        :type cgmlst_schema: object
        :param trst: The trst of this AnalysisResult.  # noqa: E501
        :type trst: str
        :param tcda: The tcda of this AnalysisResult.  # noqa: E501
        :type tcda: str
        :param tcdb: The tcdb of this AnalysisResult.  # noqa: E501
        :type tcdb: str
        :param cdta_cdtb: The cdta_cdtb of this AnalysisResult.  # noqa: E501
        :type cdta_cdtb: str
        :param del_117: The del_117 of this AnalysisResult.  # noqa: E501
        :type del_117: str
        :param a117t: The a117t of this AnalysisResult.  # noqa: E501
        :type a117t: str
        :param cdiff_details: The cdiff_details of this AnalysisResult.  # noqa: E501
        :type cdiff_details: str
        :param adhaesion: The adhaesion of this AnalysisResult.  # noqa: E501
        :type adhaesion: str
        :param toxin: The toxin of this AnalysisResult.  # noqa: E501
        :type toxin: str
        :param toxin_details: The toxin_details of this AnalysisResult.  # noqa: E501
        :type toxin_details: str
        :param bifrost_min_read_check: The bifrost_min_read_check of this AnalysisResult.  # noqa: E501
        :type bifrost_min_read_check: str
        :param bifrost_whats_my_species: The bifrost_whats_my_species of this AnalysisResult.  # noqa: E501
        :type bifrost_whats_my_species: str
        :param bifrost_assemblatron: The bifrost_assemblatron of this AnalysisResult.  # noqa: E501
        :type bifrost_assemblatron: str
        :param bifrost_assembly_qc: The bifrost_assembly_qc of this AnalysisResult.  # noqa: E501
        :type bifrost_assembly_qc: str
        :param bifrost_ssi_stamper: The bifrost_ssi_stamper of this AnalysisResult.  # noqa: E501
        :type bifrost_ssi_stamper: str
        :param bifrost_cge_mlst: The bifrost_cge_mlst of this AnalysisResult.  # noqa: E501
        :type bifrost_cge_mlst: str
        :param bifrost_cge_resfinder: The bifrost_cge_resfinder of this AnalysisResult.  # noqa: E501
        :type bifrost_cge_resfinder: str
        :param bifrost_seqsero: The bifrost_seqsero of this AnalysisResult.  # noqa: E501
        :type bifrost_seqsero: str
        :param bifrost_enterobase: The bifrost_enterobase of this AnalysisResult.  # noqa: E501
        :type bifrost_enterobase: str
        :param bifrost_salmonella_subspecies_dtartrate: The bifrost_salmonella_subspecies_dtartrate of this AnalysisResult.  # noqa: E501
        :type bifrost_salmonella_subspecies_dtartrate: str
        :param bifrost_chewbbaca: The bifrost_chewbbaca of this AnalysisResult.  # noqa: E501
        :type bifrost_chewbbaca: str
        :param bifrost_sp_ecoli: The bifrost_sp_ecoli of this AnalysisResult.  # noqa: E501
        :type bifrost_sp_ecoli: str
        :param bifrost_sp_cdiff: The bifrost_sp_cdiff of this AnalysisResult.  # noqa: E501
        :type bifrost_sp_cdiff: str
        :param bifrost_amrfinderplus: The bifrost_amrfinderplus of this AnalysisResult.  # noqa: E501
        :type bifrost_amrfinderplus: str
        """
        self.openapi_types = {
            'id': str,
            'sequence_id': str,
            'sequence_filename': str,
            'isolate_id': str,
            'institution': Organization,
            'project_number': str,
            'project_title': str,
            'date_sample': datetime,
            'date_received': datetime,
            'date_sofi': datetime,
            'run_id': str,
            'public_number': str,
            'primary_isolate': bool,
            'chr_number': str,
            'cvr_number': str,
            'aut_number': str,
            'product_type': str,
            'product': str,
            'origin_country': str,
            'animal_species': str,
            'sample_info': str,
            'cpr_nr': str,
            'gender': str,
            'name': str,
            'age': int,
            'travel': str,
            'travel_country': str,
            'date_run': datetime,
            'date_received_kma': datetime,
            'kma': str,
            'region': str,
            'fud_number': str,
            'cluster_id': str,
            'date_epi': str,
            'latest_for_isolate': str,
            'resfinder_version': str,
            'date_analysis_sofi': datetime,
            'date_approved_serotype': datetime,
            'date_approved_qc': datetime,
            'date_approved_amr': datetime,
            'date_approved_st': datetime,
            'date_approved_toxin': datetime,
            'date_approved_cluster': datetime,
            'date_approved_cdiff': datetime,
            'qc_provided_species': str,
            'qc_genome1x': float,
            'qc_genome10x': float,
            'qc_gsize_diff1x10': float,
            'qc_avg_coverage': float,
            'qc_final': str,
            'qc_action': str,
            'qc_num_contigs': float,
            'qc_ambiguous_sites': float,
            'qc_num_reads': float,
            'qc_main_sp_plus_uncl': float,
            'qc_unclassified_reads': float,
            'qc_db_id': str,
            'qc_db_id2': str,
            'qc_failed_tests': List[AnalysisResultAllOfQcFailedTests],
            'call_percent': float,
            'multiple_alleles': float,
            'subspecies': str,
            'species_final': str,
            'st': str,
            'st_final': int,
            'st_alleles': object,
            'pathotype': str,
            'pathotype_final': str,
            'sero_enterobase': str,
            'sero_seqsero': str,
            'sero_antigen_seqsero': str,
            'sero_d_tartrate': str,
            'sero_serotype_finder': str,
            'serotype_final': str,
            'adhesion_final': str,
            'virulence_genes': str,
            'toxins_final': str,
            'infection_source': str,
            'resistance_genes': str,
            'amr_profile': str,
            'comment': str,
            'comment_cluster': str,
            'comment_general': str,
            'comment_supplementary': str,
            'comment_qc': str,
            'amr_ami': Resistance,
            'amr_amp': Resistance,
            'amr_azi': Resistance,
            'amr_fep': Resistance,
            'amr_fot': Resistance,
            'amr_f_c': Resistance,
            'amr_fox': Resistance,
            'amr_taz': Resistance,
            'amr_t_c': Resistance,
            'amr_chl': Resistance,
            'amr_cip': Resistance,
            'amr_cli': Resistance,
            'amr_col': Resistance,
            'amr_dap': Resistance,
            'amr_etp': Resistance,
            'amr_ery': Resistance,
            'amr_fus': Resistance,
            'amr_gen': Resistance,
            'amr_imi': Resistance,
            'amr_kan': Resistance,
            'amr_lzd': Resistance,
            'amr_mero': Resistance,
            'amr_mup': Resistance,
            'amr_nal': Resistance,
            'amr_pen': Resistance,
            'amr_syn': Resistance,
            'amr_rif': Resistance,
            'amr_str': Resistance,
            'amr_sul': Resistance,
            'amr_tei': Resistance,
            'amr_trm': Resistance,
            'amr_tet': Resistance,
            'amr_tia': Resistance,
            'amr_tgc': Resistance,
            'amr_tmp': Resistance,
            'amr_van': Resistance,
            'cgmlst_schema': object,
            'trst': str,
            'tcda': str,
            'tcdb': str,
            'cdta_cdtb': str,
            'del_117': str,
            'a117t': str,
            'cdiff_details': str,
            'adhaesion': str,
            'toxin': str,
            'toxin_details': str,
            'bifrost_min_read_check': str,
            'bifrost_whats_my_species': str,
            'bifrost_assemblatron': str,
            'bifrost_assembly_qc': str,
            'bifrost_ssi_stamper': str,
            'bifrost_cge_mlst': str,
            'bifrost_cge_resfinder': str,
            'bifrost_seqsero': str,
            'bifrost_enterobase': str,
            'bifrost_salmonella_subspecies_dtartrate': str,
            'bifrost_chewbbaca': str,
            'bifrost_sp_ecoli': str,
            'bifrost_sp_cdiff': str,
            'bifrost_amrfinderplus': str,
        }

        self.attribute_map = {
            'id': 'id',
            'sequence_id': 'sequence_id',
            'sequence_filename': 'sequence_filename',
            'isolate_id': 'isolate_id',
            'institution': 'institution',
            'project_number': 'project_number',
            'project_title': 'project_title',
            'date_sample': 'date_sample',
            'date_received': 'date_received',
            'date_sofi': 'date_sofi',
            'run_id': 'run_id',
            'public_number': 'public_number',
            'primary_isolate': 'primary_isolate',
            'chr_number': 'chr_number',
            'cvr_number': 'cvr_number',
            'aut_number': 'aut_number',
            'product_type': 'product_type',
            'product': 'product',
            'origin_country': 'origin_country',
            'animal_species': 'animal_species',
            'sample_info': 'sample_info',
            'cpr_nr': 'cpr_nr',
            'gender': 'gender',
            'name': 'name',
            'age': 'age',
            'travel': 'travel',
            'travel_country': 'travel_country',
            'date_run': 'date_run',
            'date_received_kma': 'date_received_kma',
            'kma': 'kma',
            'region': 'region',
            'fud_number': 'fud_number',
            'cluster_id': 'cluster_id',
            'date_epi': 'date_epi',
            'latest_for_isolate': 'latest_for_isolate',
            'resfinder_version': 'resfinder_version',
            'date_analysis_sofi': 'date_analysis_sofi',
            'date_approved_serotype': 'date_approved_serotype',
            'date_approved_qc': 'date_approved_qc',
            'date_approved_amr': 'date_approved_amr',
            'date_approved_st': 'date_approved_st',
            'date_approved_toxin': 'date_approved_toxin',
            'date_approved_cluster': 'date_approved_cluster',
            'date_approved_cdiff': 'date_approved_cdiff',
            'qc_provided_species': 'qc_provided_species',
            'qc_genome1x': 'qc_genome1x',
            'qc_genome10x': 'qc_genome10x',
            'qc_gsize_diff1x10': 'qc_gsize_diff1x10',
            'qc_avg_coverage': 'qc_avg_coverage',
            'qc_final': 'qc_final',
            'qc_action': 'qc_action',
            'qc_num_contigs': 'qc_num_contigs',
            'qc_ambiguous_sites': 'qc_ambiguous_sites',
            'qc_num_reads': 'qc_num_reads',
            'qc_main_sp_plus_uncl': 'qc_main_sp_plus_uncl',
            'qc_unclassified_reads': 'qc_unclassified_reads',
            'qc_db_id': 'qc_db_id',
            'qc_db_id2': 'qc_db_id2',
            'qc_failed_tests': 'qc_failed_tests',
            'call_percent': 'call_percent',
            'multiple_alleles': 'multiple_alleles',
            'subspecies': 'subspecies',
            'species_final': 'species_final',
            'st': 'st',
            'st_final': 'st_final',
            'st_alleles': 'st_alleles',
            'pathotype': 'pathotype',
            'pathotype_final': 'pathotype_final',
            'sero_enterobase': 'sero_enterobase',
            'sero_seqsero': 'sero_seqsero',
            'sero_antigen_seqsero': 'sero_antigen_seqsero',
            'sero_d_tartrate': 'sero_d_tartrate',
            'sero_serotype_finder': 'sero_serotype_finder',
            'serotype_final': 'serotype_final',
            'adhesion_final': 'adhesion_final',
            'virulence_genes': 'virulence_genes',
            'toxins_final': 'toxins_final',
            'infection_source': 'infection_source',
            'resistance_genes': 'resistance_genes',
            'amr_profile': 'amr_profile',
            'comment': 'comment',
            'comment_cluster': 'comment_cluster',
            'comment_general': 'comment_general',
            'comment_supplementary': 'comment_supplementary',
            'comment_qc': 'comment_qc',
            'amr_ami': 'amr_ami',
            'amr_amp': 'amr_amp',
            'amr_azi': 'amr_azi',
            'amr_fep': 'amr_fep',
            'amr_fot': 'amr_fot',
            'amr_f_c': 'amr_f_c',
            'amr_fox': 'amr_fox',
            'amr_taz': 'amr_taz',
            'amr_t_c': 'amr_t_c',
            'amr_chl': 'amr_chl',
            'amr_cip': 'amr_cip',
            'amr_cli': 'amr_cli',
            'amr_col': 'amr_col',
            'amr_dap': 'amr_dap',
            'amr_etp': 'amr_etp',
            'amr_ery': 'amr_ery',
            'amr_fus': 'amr_fus',
            'amr_gen': 'amr_gen',
            'amr_imi': 'amr_imi',
            'amr_kan': 'amr_kan',
            'amr_lzd': 'amr_lzd',
            'amr_mero': 'amr_mero',
            'amr_mup': 'amr_mup',
            'amr_nal': 'amr_nal',
            'amr_pen': 'amr_pen',
            'amr_syn': 'amr_syn',
            'amr_rif': 'amr_rif',
            'amr_str': 'amr_str',
            'amr_sul': 'amr_sul',
            'amr_tei': 'amr_tei',
            'amr_trm': 'amr_trm',
            'amr_tet': 'amr_tet',
            'amr_tia': 'amr_tia',
            'amr_tgc': 'amr_tgc',
            'amr_tmp': 'amr_tmp',
            'amr_van': 'amr_van',
            'cgmlst_schema': 'cgmlst_schema',
            'trst': 'trst',
            'tcda': 'tcda',
            'tcdb': 'tcdb',
            'cdta_cdtb': 'cdta_cdtb',
            'del_117': 'del_117',
            'a117t': 'a117t',
            'cdiff_details': 'cdiff_details',
            'adhaesion': 'adhaesion',
            'toxin': 'toxin',
            'toxin_details': 'toxin_details',
            'bifrost_min_read_check': 'bifrost_min_read_check',
            'bifrost_whats_my_species': 'bifrost_whats_my_species',
            'bifrost_assemblatron': 'bifrost_assemblatron',
            'bifrost_assembly_qc': 'bifrost_assembly_qc',
            'bifrost_ssi_stamper': 'bifrost_ssi_stamper',
            'bifrost_cge_mlst': 'bifrost_cge_mlst',
            'bifrost_cge_resfinder': 'bifrost_cge_resfinder',
            'bifrost_seqsero': 'bifrost_seqsero',
            'bifrost_enterobase': 'bifrost_enterobase',
            'bifrost_salmonella_subspecies_dtartrate': 'bifrost_salmonella_subspecies_dtartrate',
            'bifrost_chewbbaca': 'bifrost_chewbbaca',
            'bifrost_sp_ecoli': 'bifrost_sp_ecoli',
            'bifrost_sp_cdiff': 'bifrost_sp_cdiff',
            'bifrost_amrfinderplus': 'bifrost_amrfinderplus',
        }

        self._id = id
        self._sequence_id = sequence_id
        self._sequence_filename = sequence_filename
        self._isolate_id = isolate_id
        self._institution = institution
        self._project_number = project_number
        self._project_title = project_title
        self._date_sample = date_sample
        self._date_received = date_received
        self._date_sofi = date_sofi
        self._run_id = run_id
        self._public_number = public_number
        self._primary_isolate = primary_isolate
        self._chr_number = chr_number
        self._cvr_number = cvr_number
        self._aut_number = aut_number
        self._product_type = product_type
        self._product = product
        self._origin_country = origin_country
        self._animal_species = animal_species
        self._sample_info = sample_info
        self._cpr_nr = cpr_nr
        self._gender = gender
        self._name = name
        self._age = age
        self._travel = travel
        self._travel_country = travel_country
        self._date_run = date_run
        self._date_received_kma = date_received_kma
        self._kma = kma
        self._region = region
        self._fud_number = fud_number
        self._cluster_id = cluster_id
        self._date_epi = date_epi
        self._latest_for_isolate = latest_for_isolate
        self._resfinder_version = resfinder_version
        self._date_analysis_sofi = date_analysis_sofi
        self._date_approved_serotype = date_approved_serotype
        self._date_approved_qc = date_approved_qc
        self._date_approved_amr = date_approved_amr
        self._date_approved_st = date_approved_st
        self._date_approved_toxin = date_approved_toxin
        self._date_approved_cluster = date_approved_cluster
        self._date_approved_cdiff = date_approved_cdiff
        self._qc_provided_species = qc_provided_species
        self._qc_genome1x = qc_genome1x
        self._qc_genome10x = qc_genome10x
        self._qc_gsize_diff1x10 = qc_gsize_diff1x10
        self._qc_avg_coverage = qc_avg_coverage
        self._qc_final = qc_final
        self._qc_action = qc_action
        self._qc_num_contigs = qc_num_contigs
        self._qc_ambiguous_sites = qc_ambiguous_sites
        self._qc_num_reads = qc_num_reads
        self._qc_main_sp_plus_uncl = qc_main_sp_plus_uncl
        self._qc_unclassified_reads = qc_unclassified_reads
        self._qc_db_id = qc_db_id
        self._qc_db_id2 = qc_db_id2
        self._qc_failed_tests = qc_failed_tests
        self._call_percent = call_percent
        self._multiple_alleles = multiple_alleles
        self._subspecies = subspecies
        self._species_final = species_final
        self._st = st
        self._st_final = st_final
        self._st_alleles = st_alleles
        self._pathotype = pathotype
        self._pathotype_final = pathotype_final
        self._sero_enterobase = sero_enterobase
        self._sero_seqsero = sero_seqsero
        self._sero_antigen_seqsero = sero_antigen_seqsero
        self._sero_d_tartrate = sero_d_tartrate
        self._sero_serotype_finder = sero_serotype_finder
        self._serotype_final = serotype_final
        self._adhesion_final = adhesion_final
        self._virulence_genes = virulence_genes
        self._toxins_final = toxins_final
        self._infection_source = infection_source
        self._resistance_genes = resistance_genes
        self._amr_profile = amr_profile
        self._comment = comment
        self._comment_cluster = comment_cluster
        self._comment_general = comment_general
        self._comment_supplementary = comment_supplementary
        self._comment_qc = comment_qc
        self._amr_ami = amr_ami
        self._amr_amp = amr_amp
        self._amr_azi = amr_azi
        self._amr_fep = amr_fep
        self._amr_fot = amr_fot
        self._amr_f_c = amr_f_c
        self._amr_fox = amr_fox
        self._amr_taz = amr_taz
        self._amr_t_c = amr_t_c
        self._amr_chl = amr_chl
        self._amr_cip = amr_cip
        self._amr_cli = amr_cli
        self._amr_col = amr_col
        self._amr_dap = amr_dap
        self._amr_etp = amr_etp
        self._amr_ery = amr_ery
        self._amr_fus = amr_fus
        self._amr_gen = amr_gen
        self._amr_imi = amr_imi
        self._amr_kan = amr_kan
        self._amr_lzd = amr_lzd
        self._amr_mero = amr_mero
        self._amr_mup = amr_mup
        self._amr_nal = amr_nal
        self._amr_pen = amr_pen
        self._amr_syn = amr_syn
        self._amr_rif = amr_rif
        self._amr_str = amr_str
        self._amr_sul = amr_sul
        self._amr_tei = amr_tei
        self._amr_trm = amr_trm
        self._amr_tet = amr_tet
        self._amr_tia = amr_tia
        self._amr_tgc = amr_tgc
        self._amr_tmp = amr_tmp
        self._amr_van = amr_van
        self._cgmlst_schema = cgmlst_schema
        self._trst = trst
        self._tcda = tcda
        self._tcdb = tcdb
        self._cdta_cdtb = cdta_cdtb
        self._del_117 = del_117
        self._a117t = a117t
        self._cdiff_details = cdiff_details
        self._adhaesion = adhaesion
        self._toxin = toxin
        self._toxin_details = toxin_details
        self._bifrost_min_read_check = bifrost_min_read_check
        self._bifrost_whats_my_species = bifrost_whats_my_species
        self._bifrost_assemblatron = bifrost_assemblatron
        self._bifrost_assembly_qc = bifrost_assembly_qc
        self._bifrost_ssi_stamper = bifrost_ssi_stamper
        self._bifrost_cge_mlst = bifrost_cge_mlst
        self._bifrost_cge_resfinder = bifrost_cge_resfinder
        self._bifrost_seqsero = bifrost_seqsero
        self._bifrost_enterobase = bifrost_enterobase
        self._bifrost_salmonella_subspecies_dtartrate = bifrost_salmonella_subspecies_dtartrate
        self._bifrost_chewbbaca = bifrost_chewbbaca
        self._bifrost_sp_ecoli = bifrost_sp_ecoli
        self._bifrost_sp_cdiff = bifrost_sp_cdiff
        self._bifrost_amrfinderplus = bifrost_amrfinderplus

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalysisResult of this AnalysisResult.  # noqa: E501
        :rtype: AnalysisResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AnalysisResult.


        :return: The id of this AnalysisResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalysisResult.


        :param id: The id of this AnalysisResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sequence_id(self):
        """Gets the sequence_id of this AnalysisResult.


        :return: The sequence_id of this AnalysisResult.
        :rtype: str
        """
        return self._sequence_id

    @sequence_id.setter
    def sequence_id(self, sequence_id):
        """Sets the sequence_id of this AnalysisResult.


        :param sequence_id: The sequence_id of this AnalysisResult.
        :type sequence_id: str
        """
        if sequence_id is None:
            raise ValueError("Invalid value for `sequence_id`, must not be `None`")  # noqa: E501

        self._sequence_id = sequence_id

    @property
    def sequence_filename(self):
        """Gets the sequence_filename of this AnalysisResult.


        :return: The sequence_filename of this AnalysisResult.
        :rtype: str
        """
        return self._sequence_filename

    @sequence_filename.setter
    def sequence_filename(self, sequence_filename):
        """Sets the sequence_filename of this AnalysisResult.


        :param sequence_filename: The sequence_filename of this AnalysisResult.
        :type sequence_filename: str
        """

        self._sequence_filename = sequence_filename

    @property
    def isolate_id(self):
        """Gets the isolate_id of this AnalysisResult.


        :return: The isolate_id of this AnalysisResult.
        :rtype: str
        """
        return self._isolate_id

    @isolate_id.setter
    def isolate_id(self, isolate_id):
        """Sets the isolate_id of this AnalysisResult.


        :param isolate_id: The isolate_id of this AnalysisResult.
        :type isolate_id: str
        """
        if isolate_id is None:
            raise ValueError("Invalid value for `isolate_id`, must not be `None`")  # noqa: E501

        self._isolate_id = isolate_id

    @property
    def institution(self):
        """Gets the institution of this AnalysisResult.


        :return: The institution of this AnalysisResult.
        :rtype: Organization
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this AnalysisResult.


        :param institution: The institution of this AnalysisResult.
        :type institution: Organization
        """
        if institution is None:
            raise ValueError("Invalid value for `institution`, must not be `None`")  # noqa: E501

        self._institution = institution

    @property
    def project_number(self):
        """Gets the project_number of this AnalysisResult.


        :return: The project_number of this AnalysisResult.
        :rtype: str
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this AnalysisResult.


        :param project_number: The project_number of this AnalysisResult.
        :type project_number: str
        """

        self._project_number = project_number

    @property
    def project_title(self):
        """Gets the project_title of this AnalysisResult.


        :return: The project_title of this AnalysisResult.
        :rtype: str
        """
        return self._project_title

    @project_title.setter
    def project_title(self, project_title):
        """Sets the project_title of this AnalysisResult.


        :param project_title: The project_title of this AnalysisResult.
        :type project_title: str
        """

        self._project_title = project_title

    @property
    def date_sample(self):
        """Gets the date_sample of this AnalysisResult.


        :return: The date_sample of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_sample

    @date_sample.setter
    def date_sample(self, date_sample):
        """Sets the date_sample of this AnalysisResult.


        :param date_sample: The date_sample of this AnalysisResult.
        :type date_sample: datetime
        """

        self._date_sample = date_sample

    @property
    def date_received(self):
        """Gets the date_received of this AnalysisResult.


        :return: The date_received of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """Sets the date_received of this AnalysisResult.


        :param date_received: The date_received of this AnalysisResult.
        :type date_received: datetime
        """
        if date_received is None:
            raise ValueError("Invalid value for `date_received`, must not be `None`")  # noqa: E501

        self._date_received = date_received

    @property
    def date_sofi(self):
        """Gets the date_sofi of this AnalysisResult.


        :return: The date_sofi of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_sofi

    @date_sofi.setter
    def date_sofi(self, date_sofi):
        """Sets the date_sofi of this AnalysisResult.


        :param date_sofi: The date_sofi of this AnalysisResult.
        :type date_sofi: datetime
        """

        self._date_sofi = date_sofi

    @property
    def run_id(self):
        """Gets the run_id of this AnalysisResult.


        :return: The run_id of this AnalysisResult.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this AnalysisResult.


        :param run_id: The run_id of this AnalysisResult.
        :type run_id: str
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")  # noqa: E501

        self._run_id = run_id

    @property
    def public_number(self):
        """Gets the public_number of this AnalysisResult.


        :return: The public_number of this AnalysisResult.
        :rtype: str
        """
        return self._public_number

    @public_number.setter
    def public_number(self, public_number):
        """Sets the public_number of this AnalysisResult.


        :param public_number: The public_number of this AnalysisResult.
        :type public_number: str
        """

        self._public_number = public_number

    @property
    def primary_isolate(self):
        """Gets the primary_isolate of this AnalysisResult.


        :return: The primary_isolate of this AnalysisResult.
        :rtype: bool
        """
        return self._primary_isolate

    @primary_isolate.setter
    def primary_isolate(self, primary_isolate):
        """Sets the primary_isolate of this AnalysisResult.


        :param primary_isolate: The primary_isolate of this AnalysisResult.
        :type primary_isolate: bool
        """
        if primary_isolate is None:
            raise ValueError("Invalid value for `primary_isolate`, must not be `None`")  # noqa: E501

        self._primary_isolate = primary_isolate

    @property
    def chr_number(self):
        """Gets the chr_number of this AnalysisResult.


        :return: The chr_number of this AnalysisResult.
        :rtype: str
        """
        return self._chr_number

    @chr_number.setter
    def chr_number(self, chr_number):
        """Sets the chr_number of this AnalysisResult.


        :param chr_number: The chr_number of this AnalysisResult.
        :type chr_number: str
        """

        self._chr_number = chr_number

    @property
    def cvr_number(self):
        """Gets the cvr_number of this AnalysisResult.


        :return: The cvr_number of this AnalysisResult.
        :rtype: str
        """
        return self._cvr_number

    @cvr_number.setter
    def cvr_number(self, cvr_number):
        """Sets the cvr_number of this AnalysisResult.


        :param cvr_number: The cvr_number of this AnalysisResult.
        :type cvr_number: str
        """

        self._cvr_number = cvr_number

    @property
    def aut_number(self):
        """Gets the aut_number of this AnalysisResult.


        :return: The aut_number of this AnalysisResult.
        :rtype: str
        """
        return self._aut_number

    @aut_number.setter
    def aut_number(self, aut_number):
        """Sets the aut_number of this AnalysisResult.


        :param aut_number: The aut_number of this AnalysisResult.
        :type aut_number: str
        """

        self._aut_number = aut_number

    @property
    def product_type(self):
        """Gets the product_type of this AnalysisResult.


        :return: The product_type of this AnalysisResult.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this AnalysisResult.


        :param product_type: The product_type of this AnalysisResult.
        :type product_type: str
        """

        self._product_type = product_type

    @property
    def product(self):
        """Gets the product of this AnalysisResult.


        :return: The product of this AnalysisResult.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AnalysisResult.


        :param product: The product of this AnalysisResult.
        :type product: str
        """

        self._product = product

    @property
    def origin_country(self):
        """Gets the origin_country of this AnalysisResult.


        :return: The origin_country of this AnalysisResult.
        :rtype: str
        """
        return self._origin_country

    @origin_country.setter
    def origin_country(self, origin_country):
        """Sets the origin_country of this AnalysisResult.


        :param origin_country: The origin_country of this AnalysisResult.
        :type origin_country: str
        """

        self._origin_country = origin_country

    @property
    def animal_species(self):
        """Gets the animal_species of this AnalysisResult.


        :return: The animal_species of this AnalysisResult.
        :rtype: str
        """
        return self._animal_species

    @animal_species.setter
    def animal_species(self, animal_species):
        """Sets the animal_species of this AnalysisResult.


        :param animal_species: The animal_species of this AnalysisResult.
        :type animal_species: str
        """

        self._animal_species = animal_species

    @property
    def sample_info(self):
        """Gets the sample_info of this AnalysisResult.


        :return: The sample_info of this AnalysisResult.
        :rtype: str
        """
        return self._sample_info

    @sample_info.setter
    def sample_info(self, sample_info):
        """Sets the sample_info of this AnalysisResult.


        :param sample_info: The sample_info of this AnalysisResult.
        :type sample_info: str
        """

        self._sample_info = sample_info

    @property
    def cpr_nr(self):
        """Gets the cpr_nr of this AnalysisResult.


        :return: The cpr_nr of this AnalysisResult.
        :rtype: str
        """
        return self._cpr_nr

    @cpr_nr.setter
    def cpr_nr(self, cpr_nr):
        """Sets the cpr_nr of this AnalysisResult.


        :param cpr_nr: The cpr_nr of this AnalysisResult.
        :type cpr_nr: str
        """

        self._cpr_nr = cpr_nr

    @property
    def gender(self):
        """Gets the gender of this AnalysisResult.


        :return: The gender of this AnalysisResult.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this AnalysisResult.


        :param gender: The gender of this AnalysisResult.
        :type gender: str
        """
        allowed_values = ["M", "K"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def name(self):
        """Gets the name of this AnalysisResult.


        :return: The name of this AnalysisResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalysisResult.


        :param name: The name of this AnalysisResult.
        :type name: str
        """

        self._name = name

    @property
    def age(self):
        """Gets the age of this AnalysisResult.


        :return: The age of this AnalysisResult.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this AnalysisResult.


        :param age: The age of this AnalysisResult.
        :type age: int
        """
        if age is not None and age > 128:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value less than or equal to `128`")  # noqa: E501
        if age is not None and age < 0:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value greater than or equal to `0`")  # noqa: E501

        self._age = age

    @property
    def travel(self):
        """Gets the travel of this AnalysisResult.


        :return: The travel of this AnalysisResult.
        :rtype: str
        """
        return self._travel

    @travel.setter
    def travel(self, travel):
        """Sets the travel of this AnalysisResult.


        :param travel: The travel of this AnalysisResult.
        :type travel: str
        """

        self._travel = travel

    @property
    def travel_country(self):
        """Gets the travel_country of this AnalysisResult.


        :return: The travel_country of this AnalysisResult.
        :rtype: str
        """
        return self._travel_country

    @travel_country.setter
    def travel_country(self, travel_country):
        """Sets the travel_country of this AnalysisResult.


        :param travel_country: The travel_country of this AnalysisResult.
        :type travel_country: str
        """

        self._travel_country = travel_country

    @property
    def date_run(self):
        """Gets the date_run of this AnalysisResult.


        :return: The date_run of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_run

    @date_run.setter
    def date_run(self, date_run):
        """Sets the date_run of this AnalysisResult.


        :param date_run: The date_run of this AnalysisResult.
        :type date_run: datetime
        """

        self._date_run = date_run

    @property
    def date_received_kma(self):
        """Gets the date_received_kma of this AnalysisResult.


        :return: The date_received_kma of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_received_kma

    @date_received_kma.setter
    def date_received_kma(self, date_received_kma):
        """Sets the date_received_kma of this AnalysisResult.


        :param date_received_kma: The date_received_kma of this AnalysisResult.
        :type date_received_kma: datetime
        """

        self._date_received_kma = date_received_kma

    @property
    def kma(self):
        """Gets the kma of this AnalysisResult.


        :return: The kma of this AnalysisResult.
        :rtype: str
        """
        return self._kma

    @kma.setter
    def kma(self, kma):
        """Sets the kma of this AnalysisResult.


        :param kma: The kma of this AnalysisResult.
        :type kma: str
        """

        self._kma = kma

    @property
    def region(self):
        """Gets the region of this AnalysisResult.


        :return: The region of this AnalysisResult.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AnalysisResult.


        :param region: The region of this AnalysisResult.
        :type region: str
        """

        self._region = region

    @property
    def fud_number(self):
        """Gets the fud_number of this AnalysisResult.


        :return: The fud_number of this AnalysisResult.
        :rtype: str
        """
        return self._fud_number

    @fud_number.setter
    def fud_number(self, fud_number):
        """Sets the fud_number of this AnalysisResult.


        :param fud_number: The fud_number of this AnalysisResult.
        :type fud_number: str
        """

        self._fud_number = fud_number

    @property
    def cluster_id(self):
        """Gets the cluster_id of this AnalysisResult.


        :return: The cluster_id of this AnalysisResult.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this AnalysisResult.


        :param cluster_id: The cluster_id of this AnalysisResult.
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def date_epi(self):
        """Gets the date_epi of this AnalysisResult.


        :return: The date_epi of this AnalysisResult.
        :rtype: str
        """
        return self._date_epi

    @date_epi.setter
    def date_epi(self, date_epi):
        """Sets the date_epi of this AnalysisResult.


        :param date_epi: The date_epi of this AnalysisResult.
        :type date_epi: str
        """

        self._date_epi = date_epi

    @property
    def latest_for_isolate(self):
        """Gets the latest_for_isolate of this AnalysisResult.

        sequence_id of latest result with this same isolate_id  # noqa: E501

        :return: The latest_for_isolate of this AnalysisResult.
        :rtype: str
        """
        return self._latest_for_isolate

    @latest_for_isolate.setter
    def latest_for_isolate(self, latest_for_isolate):
        """Sets the latest_for_isolate of this AnalysisResult.

        sequence_id of latest result with this same isolate_id  # noqa: E501

        :param latest_for_isolate: The latest_for_isolate of this AnalysisResult.
        :type latest_for_isolate: str
        """

        self._latest_for_isolate = latest_for_isolate

    @property
    def resfinder_version(self):
        """Gets the resfinder_version of this AnalysisResult.


        :return: The resfinder_version of this AnalysisResult.
        :rtype: str
        """
        return self._resfinder_version

    @resfinder_version.setter
    def resfinder_version(self, resfinder_version):
        """Sets the resfinder_version of this AnalysisResult.


        :param resfinder_version: The resfinder_version of this AnalysisResult.
        :type resfinder_version: str
        """

        self._resfinder_version = resfinder_version

    @property
    def date_analysis_sofi(self):
        """Gets the date_analysis_sofi of this AnalysisResult.


        :return: The date_analysis_sofi of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_analysis_sofi

    @date_analysis_sofi.setter
    def date_analysis_sofi(self, date_analysis_sofi):
        """Sets the date_analysis_sofi of this AnalysisResult.


        :param date_analysis_sofi: The date_analysis_sofi of this AnalysisResult.
        :type date_analysis_sofi: datetime
        """

        self._date_analysis_sofi = date_analysis_sofi

    @property
    def date_approved_serotype(self):
        """Gets the date_approved_serotype of this AnalysisResult.


        :return: The date_approved_serotype of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_approved_serotype

    @date_approved_serotype.setter
    def date_approved_serotype(self, date_approved_serotype):
        """Sets the date_approved_serotype of this AnalysisResult.


        :param date_approved_serotype: The date_approved_serotype of this AnalysisResult.
        :type date_approved_serotype: datetime
        """

        self._date_approved_serotype = date_approved_serotype

    @property
    def date_approved_qc(self):
        """Gets the date_approved_qc of this AnalysisResult.


        :return: The date_approved_qc of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_approved_qc

    @date_approved_qc.setter
    def date_approved_qc(self, date_approved_qc):
        """Sets the date_approved_qc of this AnalysisResult.


        :param date_approved_qc: The date_approved_qc of this AnalysisResult.
        :type date_approved_qc: datetime
        """

        self._date_approved_qc = date_approved_qc

    @property
    def date_approved_amr(self):
        """Gets the date_approved_amr of this AnalysisResult.


        :return: The date_approved_amr of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_approved_amr

    @date_approved_amr.setter
    def date_approved_amr(self, date_approved_amr):
        """Sets the date_approved_amr of this AnalysisResult.


        :param date_approved_amr: The date_approved_amr of this AnalysisResult.
        :type date_approved_amr: datetime
        """

        self._date_approved_amr = date_approved_amr

    @property
    def date_approved_st(self):
        """Gets the date_approved_st of this AnalysisResult.


        :return: The date_approved_st of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_approved_st

    @date_approved_st.setter
    def date_approved_st(self, date_approved_st):
        """Sets the date_approved_st of this AnalysisResult.


        :param date_approved_st: The date_approved_st of this AnalysisResult.
        :type date_approved_st: datetime
        """

        self._date_approved_st = date_approved_st

    @property
    def date_approved_toxin(self):
        """Gets the date_approved_toxin of this AnalysisResult.


        :return: The date_approved_toxin of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_approved_toxin

    @date_approved_toxin.setter
    def date_approved_toxin(self, date_approved_toxin):
        """Sets the date_approved_toxin of this AnalysisResult.


        :param date_approved_toxin: The date_approved_toxin of this AnalysisResult.
        :type date_approved_toxin: datetime
        """

        self._date_approved_toxin = date_approved_toxin

    @property
    def date_approved_cluster(self):
        """Gets the date_approved_cluster of this AnalysisResult.


        :return: The date_approved_cluster of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_approved_cluster

    @date_approved_cluster.setter
    def date_approved_cluster(self, date_approved_cluster):
        """Sets the date_approved_cluster of this AnalysisResult.


        :param date_approved_cluster: The date_approved_cluster of this AnalysisResult.
        :type date_approved_cluster: datetime
        """

        self._date_approved_cluster = date_approved_cluster

    @property
    def date_approved_cdiff(self):
        """Gets the date_approved_cdiff of this AnalysisResult.


        :return: The date_approved_cdiff of this AnalysisResult.
        :rtype: datetime
        """
        return self._date_approved_cdiff

    @date_approved_cdiff.setter
    def date_approved_cdiff(self, date_approved_cdiff):
        """Sets the date_approved_cdiff of this AnalysisResult.


        :param date_approved_cdiff: The date_approved_cdiff of this AnalysisResult.
        :type date_approved_cdiff: datetime
        """

        self._date_approved_cdiff = date_approved_cdiff

    @property
    def qc_provided_species(self):
        """Gets the qc_provided_species of this AnalysisResult.


        :return: The qc_provided_species of this AnalysisResult.
        :rtype: str
        """
        return self._qc_provided_species

    @qc_provided_species.setter
    def qc_provided_species(self, qc_provided_species):
        """Sets the qc_provided_species of this AnalysisResult.


        :param qc_provided_species: The qc_provided_species of this AnalysisResult.
        :type qc_provided_species: str
        """

        self._qc_provided_species = qc_provided_species

    @property
    def qc_genome1x(self):
        """Gets the qc_genome1x of this AnalysisResult.


        :return: The qc_genome1x of this AnalysisResult.
        :rtype: float
        """
        return self._qc_genome1x

    @qc_genome1x.setter
    def qc_genome1x(self, qc_genome1x):
        """Sets the qc_genome1x of this AnalysisResult.


        :param qc_genome1x: The qc_genome1x of this AnalysisResult.
        :type qc_genome1x: float
        """

        self._qc_genome1x = qc_genome1x

    @property
    def qc_genome10x(self):
        """Gets the qc_genome10x of this AnalysisResult.


        :return: The qc_genome10x of this AnalysisResult.
        :rtype: float
        """
        return self._qc_genome10x

    @qc_genome10x.setter
    def qc_genome10x(self, qc_genome10x):
        """Sets the qc_genome10x of this AnalysisResult.


        :param qc_genome10x: The qc_genome10x of this AnalysisResult.
        :type qc_genome10x: float
        """

        self._qc_genome10x = qc_genome10x

    @property
    def qc_gsize_diff1x10(self):
        """Gets the qc_gsize_diff1x10 of this AnalysisResult.


        :return: The qc_gsize_diff1x10 of this AnalysisResult.
        :rtype: float
        """
        return self._qc_gsize_diff1x10

    @qc_gsize_diff1x10.setter
    def qc_gsize_diff1x10(self, qc_gsize_diff1x10):
        """Sets the qc_gsize_diff1x10 of this AnalysisResult.


        :param qc_gsize_diff1x10: The qc_gsize_diff1x10 of this AnalysisResult.
        :type qc_gsize_diff1x10: float
        """

        self._qc_gsize_diff1x10 = qc_gsize_diff1x10

    @property
    def qc_avg_coverage(self):
        """Gets the qc_avg_coverage of this AnalysisResult.


        :return: The qc_avg_coverage of this AnalysisResult.
        :rtype: float
        """
        return self._qc_avg_coverage

    @qc_avg_coverage.setter
    def qc_avg_coverage(self, qc_avg_coverage):
        """Sets the qc_avg_coverage of this AnalysisResult.


        :param qc_avg_coverage: The qc_avg_coverage of this AnalysisResult.
        :type qc_avg_coverage: float
        """

        self._qc_avg_coverage = qc_avg_coverage

    @property
    def qc_final(self):
        """Gets the qc_final of this AnalysisResult.


        :return: The qc_final of this AnalysisResult.
        :rtype: str
        """
        return self._qc_final

    @qc_final.setter
    def qc_final(self, qc_final):
        """Sets the qc_final of this AnalysisResult.


        :param qc_final: The qc_final of this AnalysisResult.
        :type qc_final: str
        """
        allowed_values = ["A", "B", "C"]  # noqa: E501
        if qc_final not in allowed_values:
            raise ValueError(
                "Invalid value for `qc_final` ({0}), must be one of {1}"
                .format(qc_final, allowed_values)
            )

        self._qc_final = qc_final

    @property
    def qc_action(self):
        """Gets the qc_action of this AnalysisResult.


        :return: The qc_action of this AnalysisResult.
        :rtype: str
        """
        return self._qc_action

    @qc_action.setter
    def qc_action(self, qc_action):
        """Sets the qc_action of this AnalysisResult.


        :param qc_action: The qc_action of this AnalysisResult.
        :type qc_action: str
        """

        self._qc_action = qc_action

    @property
    def qc_num_contigs(self):
        """Gets the qc_num_contigs of this AnalysisResult.


        :return: The qc_num_contigs of this AnalysisResult.
        :rtype: float
        """
        return self._qc_num_contigs

    @qc_num_contigs.setter
    def qc_num_contigs(self, qc_num_contigs):
        """Sets the qc_num_contigs of this AnalysisResult.


        :param qc_num_contigs: The qc_num_contigs of this AnalysisResult.
        :type qc_num_contigs: float
        """

        self._qc_num_contigs = qc_num_contigs

    @property
    def qc_ambiguous_sites(self):
        """Gets the qc_ambiguous_sites of this AnalysisResult.


        :return: The qc_ambiguous_sites of this AnalysisResult.
        :rtype: float
        """
        return self._qc_ambiguous_sites

    @qc_ambiguous_sites.setter
    def qc_ambiguous_sites(self, qc_ambiguous_sites):
        """Sets the qc_ambiguous_sites of this AnalysisResult.


        :param qc_ambiguous_sites: The qc_ambiguous_sites of this AnalysisResult.
        :type qc_ambiguous_sites: float
        """

        self._qc_ambiguous_sites = qc_ambiguous_sites

    @property
    def qc_num_reads(self):
        """Gets the qc_num_reads of this AnalysisResult.


        :return: The qc_num_reads of this AnalysisResult.
        :rtype: float
        """
        return self._qc_num_reads

    @qc_num_reads.setter
    def qc_num_reads(self, qc_num_reads):
        """Sets the qc_num_reads of this AnalysisResult.


        :param qc_num_reads: The qc_num_reads of this AnalysisResult.
        :type qc_num_reads: float
        """

        self._qc_num_reads = qc_num_reads

    @property
    def qc_main_sp_plus_uncl(self):
        """Gets the qc_main_sp_plus_uncl of this AnalysisResult.


        :return: The qc_main_sp_plus_uncl of this AnalysisResult.
        :rtype: float
        """
        return self._qc_main_sp_plus_uncl

    @qc_main_sp_plus_uncl.setter
    def qc_main_sp_plus_uncl(self, qc_main_sp_plus_uncl):
        """Sets the qc_main_sp_plus_uncl of this AnalysisResult.


        :param qc_main_sp_plus_uncl: The qc_main_sp_plus_uncl of this AnalysisResult.
        :type qc_main_sp_plus_uncl: float
        """

        self._qc_main_sp_plus_uncl = qc_main_sp_plus_uncl

    @property
    def qc_unclassified_reads(self):
        """Gets the qc_unclassified_reads of this AnalysisResult.


        :return: The qc_unclassified_reads of this AnalysisResult.
        :rtype: float
        """
        return self._qc_unclassified_reads

    @qc_unclassified_reads.setter
    def qc_unclassified_reads(self, qc_unclassified_reads):
        """Sets the qc_unclassified_reads of this AnalysisResult.


        :param qc_unclassified_reads: The qc_unclassified_reads of this AnalysisResult.
        :type qc_unclassified_reads: float
        """

        self._qc_unclassified_reads = qc_unclassified_reads

    @property
    def qc_db_id(self):
        """Gets the qc_db_id of this AnalysisResult.


        :return: The qc_db_id of this AnalysisResult.
        :rtype: str
        """
        return self._qc_db_id

    @qc_db_id.setter
    def qc_db_id(self, qc_db_id):
        """Sets the qc_db_id of this AnalysisResult.


        :param qc_db_id: The qc_db_id of this AnalysisResult.
        :type qc_db_id: str
        """

        self._qc_db_id = qc_db_id

    @property
    def qc_db_id2(self):
        """Gets the qc_db_id2 of this AnalysisResult.


        :return: The qc_db_id2 of this AnalysisResult.
        :rtype: str
        """
        return self._qc_db_id2

    @qc_db_id2.setter
    def qc_db_id2(self, qc_db_id2):
        """Sets the qc_db_id2 of this AnalysisResult.


        :param qc_db_id2: The qc_db_id2 of this AnalysisResult.
        :type qc_db_id2: str
        """

        self._qc_db_id2 = qc_db_id2

    @property
    def qc_failed_tests(self):
        """Gets the qc_failed_tests of this AnalysisResult.


        :return: The qc_failed_tests of this AnalysisResult.
        :rtype: List[AnalysisResultAllOfQcFailedTests]
        """
        return self._qc_failed_tests

    @qc_failed_tests.setter
    def qc_failed_tests(self, qc_failed_tests):
        """Sets the qc_failed_tests of this AnalysisResult.


        :param qc_failed_tests: The qc_failed_tests of this AnalysisResult.
        :type qc_failed_tests: List[AnalysisResultAllOfQcFailedTests]
        """

        self._qc_failed_tests = qc_failed_tests

    @property
    def call_percent(self):
        """Gets the call_percent of this AnalysisResult.


        :return: The call_percent of this AnalysisResult.
        :rtype: float
        """
        return self._call_percent

    @call_percent.setter
    def call_percent(self, call_percent):
        """Sets the call_percent of this AnalysisResult.


        :param call_percent: The call_percent of this AnalysisResult.
        :type call_percent: float
        """

        self._call_percent = call_percent

    @property
    def multiple_alleles(self):
        """Gets the multiple_alleles of this AnalysisResult.


        :return: The multiple_alleles of this AnalysisResult.
        :rtype: float
        """
        return self._multiple_alleles

    @multiple_alleles.setter
    def multiple_alleles(self, multiple_alleles):
        """Sets the multiple_alleles of this AnalysisResult.


        :param multiple_alleles: The multiple_alleles of this AnalysisResult.
        :type multiple_alleles: float
        """

        self._multiple_alleles = multiple_alleles

    @property
    def subspecies(self):
        """Gets the subspecies of this AnalysisResult.


        :return: The subspecies of this AnalysisResult.
        :rtype: str
        """
        return self._subspecies

    @subspecies.setter
    def subspecies(self, subspecies):
        """Sets the subspecies of this AnalysisResult.


        :param subspecies: The subspecies of this AnalysisResult.
        :type subspecies: str
        """

        self._subspecies = subspecies

    @property
    def species_final(self):
        """Gets the species_final of this AnalysisResult.


        :return: The species_final of this AnalysisResult.
        :rtype: str
        """
        return self._species_final

    @species_final.setter
    def species_final(self, species_final):
        """Sets the species_final of this AnalysisResult.


        :param species_final: The species_final of this AnalysisResult.
        :type species_final: str
        """

        self._species_final = species_final

    @property
    def st(self):
        """Gets the st of this AnalysisResult.


        :return: The st of this AnalysisResult.
        :rtype: str
        """
        return self._st

    @st.setter
    def st(self, st):
        """Sets the st of this AnalysisResult.


        :param st: The st of this AnalysisResult.
        :type st: str
        """

        self._st = st

    @property
    def st_final(self):
        """Gets the st_final of this AnalysisResult.


        :return: The st_final of this AnalysisResult.
        :rtype: int
        """
        return self._st_final

    @st_final.setter
    def st_final(self, st_final):
        """Sets the st_final of this AnalysisResult.


        :param st_final: The st_final of this AnalysisResult.
        :type st_final: int
        """

        self._st_final = st_final

    @property
    def st_alleles(self):
        """Gets the st_alleles of this AnalysisResult.


        :return: The st_alleles of this AnalysisResult.
        :rtype: object
        """
        return self._st_alleles

    @st_alleles.setter
    def st_alleles(self, st_alleles):
        """Sets the st_alleles of this AnalysisResult.


        :param st_alleles: The st_alleles of this AnalysisResult.
        :type st_alleles: object
        """

        self._st_alleles = st_alleles

    @property
    def pathotype(self):
        """Gets the pathotype of this AnalysisResult.


        :return: The pathotype of this AnalysisResult.
        :rtype: str
        """
        return self._pathotype

    @pathotype.setter
    def pathotype(self, pathotype):
        """Sets the pathotype of this AnalysisResult.


        :param pathotype: The pathotype of this AnalysisResult.
        :type pathotype: str
        """

        self._pathotype = pathotype

    @property
    def pathotype_final(self):
        """Gets the pathotype_final of this AnalysisResult.


        :return: The pathotype_final of this AnalysisResult.
        :rtype: str
        """
        return self._pathotype_final

    @pathotype_final.setter
    def pathotype_final(self, pathotype_final):
        """Sets the pathotype_final of this AnalysisResult.


        :param pathotype_final: The pathotype_final of this AnalysisResult.
        :type pathotype_final: str
        """

        self._pathotype_final = pathotype_final

    @property
    def sero_enterobase(self):
        """Gets the sero_enterobase of this AnalysisResult.


        :return: The sero_enterobase of this AnalysisResult.
        :rtype: str
        """
        return self._sero_enterobase

    @sero_enterobase.setter
    def sero_enterobase(self, sero_enterobase):
        """Sets the sero_enterobase of this AnalysisResult.


        :param sero_enterobase: The sero_enterobase of this AnalysisResult.
        :type sero_enterobase: str
        """

        self._sero_enterobase = sero_enterobase

    @property
    def sero_seqsero(self):
        """Gets the sero_seqsero of this AnalysisResult.


        :return: The sero_seqsero of this AnalysisResult.
        :rtype: str
        """
        return self._sero_seqsero

    @sero_seqsero.setter
    def sero_seqsero(self, sero_seqsero):
        """Sets the sero_seqsero of this AnalysisResult.


        :param sero_seqsero: The sero_seqsero of this AnalysisResult.
        :type sero_seqsero: str
        """

        self._sero_seqsero = sero_seqsero

    @property
    def sero_antigen_seqsero(self):
        """Gets the sero_antigen_seqsero of this AnalysisResult.


        :return: The sero_antigen_seqsero of this AnalysisResult.
        :rtype: str
        """
        return self._sero_antigen_seqsero

    @sero_antigen_seqsero.setter
    def sero_antigen_seqsero(self, sero_antigen_seqsero):
        """Sets the sero_antigen_seqsero of this AnalysisResult.


        :param sero_antigen_seqsero: The sero_antigen_seqsero of this AnalysisResult.
        :type sero_antigen_seqsero: str
        """

        self._sero_antigen_seqsero = sero_antigen_seqsero

    @property
    def sero_d_tartrate(self):
        """Gets the sero_d_tartrate of this AnalysisResult.


        :return: The sero_d_tartrate of this AnalysisResult.
        :rtype: str
        """
        return self._sero_d_tartrate

    @sero_d_tartrate.setter
    def sero_d_tartrate(self, sero_d_tartrate):
        """Sets the sero_d_tartrate of this AnalysisResult.


        :param sero_d_tartrate: The sero_d_tartrate of this AnalysisResult.
        :type sero_d_tartrate: str
        """

        self._sero_d_tartrate = sero_d_tartrate

    @property
    def sero_serotype_finder(self):
        """Gets the sero_serotype_finder of this AnalysisResult.


        :return: The sero_serotype_finder of this AnalysisResult.
        :rtype: str
        """
        return self._sero_serotype_finder

    @sero_serotype_finder.setter
    def sero_serotype_finder(self, sero_serotype_finder):
        """Sets the sero_serotype_finder of this AnalysisResult.


        :param sero_serotype_finder: The sero_serotype_finder of this AnalysisResult.
        :type sero_serotype_finder: str
        """

        self._sero_serotype_finder = sero_serotype_finder

    @property
    def serotype_final(self):
        """Gets the serotype_final of this AnalysisResult.


        :return: The serotype_final of this AnalysisResult.
        :rtype: str
        """
        return self._serotype_final

    @serotype_final.setter
    def serotype_final(self, serotype_final):
        """Sets the serotype_final of this AnalysisResult.


        :param serotype_final: The serotype_final of this AnalysisResult.
        :type serotype_final: str
        """

        self._serotype_final = serotype_final

    @property
    def adhesion_final(self):
        """Gets the adhesion_final of this AnalysisResult.


        :return: The adhesion_final of this AnalysisResult.
        :rtype: str
        """
        return self._adhesion_final

    @adhesion_final.setter
    def adhesion_final(self, adhesion_final):
        """Sets the adhesion_final of this AnalysisResult.


        :param adhesion_final: The adhesion_final of this AnalysisResult.
        :type adhesion_final: str
        """

        self._adhesion_final = adhesion_final

    @property
    def virulence_genes(self):
        """Gets the virulence_genes of this AnalysisResult.


        :return: The virulence_genes of this AnalysisResult.
        :rtype: str
        """
        return self._virulence_genes

    @virulence_genes.setter
    def virulence_genes(self, virulence_genes):
        """Sets the virulence_genes of this AnalysisResult.


        :param virulence_genes: The virulence_genes of this AnalysisResult.
        :type virulence_genes: str
        """

        self._virulence_genes = virulence_genes

    @property
    def toxins_final(self):
        """Gets the toxins_final of this AnalysisResult.


        :return: The toxins_final of this AnalysisResult.
        :rtype: str
        """
        return self._toxins_final

    @toxins_final.setter
    def toxins_final(self, toxins_final):
        """Sets the toxins_final of this AnalysisResult.


        :param toxins_final: The toxins_final of this AnalysisResult.
        :type toxins_final: str
        """

        self._toxins_final = toxins_final

    @property
    def infection_source(self):
        """Gets the infection_source of this AnalysisResult.


        :return: The infection_source of this AnalysisResult.
        :rtype: str
        """
        return self._infection_source

    @infection_source.setter
    def infection_source(self, infection_source):
        """Sets the infection_source of this AnalysisResult.


        :param infection_source: The infection_source of this AnalysisResult.
        :type infection_source: str
        """

        self._infection_source = infection_source

    @property
    def resistance_genes(self):
        """Gets the resistance_genes of this AnalysisResult.


        :return: The resistance_genes of this AnalysisResult.
        :rtype: str
        """
        return self._resistance_genes

    @resistance_genes.setter
    def resistance_genes(self, resistance_genes):
        """Sets the resistance_genes of this AnalysisResult.


        :param resistance_genes: The resistance_genes of this AnalysisResult.
        :type resistance_genes: str
        """

        self._resistance_genes = resistance_genes

    @property
    def amr_profile(self):
        """Gets the amr_profile of this AnalysisResult.


        :return: The amr_profile of this AnalysisResult.
        :rtype: str
        """
        return self._amr_profile

    @amr_profile.setter
    def amr_profile(self, amr_profile):
        """Sets the amr_profile of this AnalysisResult.


        :param amr_profile: The amr_profile of this AnalysisResult.
        :type amr_profile: str
        """

        self._amr_profile = amr_profile

    @property
    def comment(self):
        """Gets the comment of this AnalysisResult.


        :return: The comment of this AnalysisResult.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AnalysisResult.


        :param comment: The comment of this AnalysisResult.
        :type comment: str
        """

        self._comment = comment

    @property
    def comment_cluster(self):
        """Gets the comment_cluster of this AnalysisResult.


        :return: The comment_cluster of this AnalysisResult.
        :rtype: str
        """
        return self._comment_cluster

    @comment_cluster.setter
    def comment_cluster(self, comment_cluster):
        """Sets the comment_cluster of this AnalysisResult.


        :param comment_cluster: The comment_cluster of this AnalysisResult.
        :type comment_cluster: str
        """

        self._comment_cluster = comment_cluster

    @property
    def comment_general(self):
        """Gets the comment_general of this AnalysisResult.


        :return: The comment_general of this AnalysisResult.
        :rtype: str
        """
        return self._comment_general

    @comment_general.setter
    def comment_general(self, comment_general):
        """Sets the comment_general of this AnalysisResult.


        :param comment_general: The comment_general of this AnalysisResult.
        :type comment_general: str
        """

        self._comment_general = comment_general

    @property
    def comment_supplementary(self):
        """Gets the comment_supplementary of this AnalysisResult.


        :return: The comment_supplementary of this AnalysisResult.
        :rtype: str
        """
        return self._comment_supplementary

    @comment_supplementary.setter
    def comment_supplementary(self, comment_supplementary):
        """Sets the comment_supplementary of this AnalysisResult.


        :param comment_supplementary: The comment_supplementary of this AnalysisResult.
        :type comment_supplementary: str
        """

        self._comment_supplementary = comment_supplementary

    @property
    def comment_qc(self):
        """Gets the comment_qc of this AnalysisResult.


        :return: The comment_qc of this AnalysisResult.
        :rtype: str
        """
        return self._comment_qc

    @comment_qc.setter
    def comment_qc(self, comment_qc):
        """Sets the comment_qc of this AnalysisResult.


        :param comment_qc: The comment_qc of this AnalysisResult.
        :type comment_qc: str
        """

        self._comment_qc = comment_qc

    @property
    def amr_ami(self):
        """Gets the amr_ami of this AnalysisResult.


        :return: The amr_ami of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_ami

    @amr_ami.setter
    def amr_ami(self, amr_ami):
        """Sets the amr_ami of this AnalysisResult.


        :param amr_ami: The amr_ami of this AnalysisResult.
        :type amr_ami: Resistance
        """

        self._amr_ami = amr_ami

    @property
    def amr_amp(self):
        """Gets the amr_amp of this AnalysisResult.


        :return: The amr_amp of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_amp

    @amr_amp.setter
    def amr_amp(self, amr_amp):
        """Sets the amr_amp of this AnalysisResult.


        :param amr_amp: The amr_amp of this AnalysisResult.
        :type amr_amp: Resistance
        """

        self._amr_amp = amr_amp

    @property
    def amr_azi(self):
        """Gets the amr_azi of this AnalysisResult.


        :return: The amr_azi of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_azi

    @amr_azi.setter
    def amr_azi(self, amr_azi):
        """Sets the amr_azi of this AnalysisResult.


        :param amr_azi: The amr_azi of this AnalysisResult.
        :type amr_azi: Resistance
        """

        self._amr_azi = amr_azi

    @property
    def amr_fep(self):
        """Gets the amr_fep of this AnalysisResult.


        :return: The amr_fep of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_fep

    @amr_fep.setter
    def amr_fep(self, amr_fep):
        """Sets the amr_fep of this AnalysisResult.


        :param amr_fep: The amr_fep of this AnalysisResult.
        :type amr_fep: Resistance
        """

        self._amr_fep = amr_fep

    @property
    def amr_fot(self):
        """Gets the amr_fot of this AnalysisResult.


        :return: The amr_fot of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_fot

    @amr_fot.setter
    def amr_fot(self, amr_fot):
        """Sets the amr_fot of this AnalysisResult.


        :param amr_fot: The amr_fot of this AnalysisResult.
        :type amr_fot: Resistance
        """

        self._amr_fot = amr_fot

    @property
    def amr_f_c(self):
        """Gets the amr_f_c of this AnalysisResult.


        :return: The amr_f_c of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_f_c

    @amr_f_c.setter
    def amr_f_c(self, amr_f_c):
        """Sets the amr_f_c of this AnalysisResult.


        :param amr_f_c: The amr_f_c of this AnalysisResult.
        :type amr_f_c: Resistance
        """

        self._amr_f_c = amr_f_c

    @property
    def amr_fox(self):
        """Gets the amr_fox of this AnalysisResult.


        :return: The amr_fox of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_fox

    @amr_fox.setter
    def amr_fox(self, amr_fox):
        """Sets the amr_fox of this AnalysisResult.


        :param amr_fox: The amr_fox of this AnalysisResult.
        :type amr_fox: Resistance
        """

        self._amr_fox = amr_fox

    @property
    def amr_taz(self):
        """Gets the amr_taz of this AnalysisResult.


        :return: The amr_taz of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_taz

    @amr_taz.setter
    def amr_taz(self, amr_taz):
        """Sets the amr_taz of this AnalysisResult.


        :param amr_taz: The amr_taz of this AnalysisResult.
        :type amr_taz: Resistance
        """

        self._amr_taz = amr_taz

    @property
    def amr_t_c(self):
        """Gets the amr_t_c of this AnalysisResult.


        :return: The amr_t_c of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_t_c

    @amr_t_c.setter
    def amr_t_c(self, amr_t_c):
        """Sets the amr_t_c of this AnalysisResult.


        :param amr_t_c: The amr_t_c of this AnalysisResult.
        :type amr_t_c: Resistance
        """

        self._amr_t_c = amr_t_c

    @property
    def amr_chl(self):
        """Gets the amr_chl of this AnalysisResult.


        :return: The amr_chl of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_chl

    @amr_chl.setter
    def amr_chl(self, amr_chl):
        """Sets the amr_chl of this AnalysisResult.


        :param amr_chl: The amr_chl of this AnalysisResult.
        :type amr_chl: Resistance
        """

        self._amr_chl = amr_chl

    @property
    def amr_cip(self):
        """Gets the amr_cip of this AnalysisResult.


        :return: The amr_cip of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_cip

    @amr_cip.setter
    def amr_cip(self, amr_cip):
        """Sets the amr_cip of this AnalysisResult.


        :param amr_cip: The amr_cip of this AnalysisResult.
        :type amr_cip: Resistance
        """

        self._amr_cip = amr_cip

    @property
    def amr_cli(self):
        """Gets the amr_cli of this AnalysisResult.


        :return: The amr_cli of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_cli

    @amr_cli.setter
    def amr_cli(self, amr_cli):
        """Sets the amr_cli of this AnalysisResult.


        :param amr_cli: The amr_cli of this AnalysisResult.
        :type amr_cli: Resistance
        """

        self._amr_cli = amr_cli

    @property
    def amr_col(self):
        """Gets the amr_col of this AnalysisResult.


        :return: The amr_col of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_col

    @amr_col.setter
    def amr_col(self, amr_col):
        """Sets the amr_col of this AnalysisResult.


        :param amr_col: The amr_col of this AnalysisResult.
        :type amr_col: Resistance
        """

        self._amr_col = amr_col

    @property
    def amr_dap(self):
        """Gets the amr_dap of this AnalysisResult.


        :return: The amr_dap of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_dap

    @amr_dap.setter
    def amr_dap(self, amr_dap):
        """Sets the amr_dap of this AnalysisResult.


        :param amr_dap: The amr_dap of this AnalysisResult.
        :type amr_dap: Resistance
        """

        self._amr_dap = amr_dap

    @property
    def amr_etp(self):
        """Gets the amr_etp of this AnalysisResult.


        :return: The amr_etp of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_etp

    @amr_etp.setter
    def amr_etp(self, amr_etp):
        """Sets the amr_etp of this AnalysisResult.


        :param amr_etp: The amr_etp of this AnalysisResult.
        :type amr_etp: Resistance
        """

        self._amr_etp = amr_etp

    @property
    def amr_ery(self):
        """Gets the amr_ery of this AnalysisResult.


        :return: The amr_ery of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_ery

    @amr_ery.setter
    def amr_ery(self, amr_ery):
        """Sets the amr_ery of this AnalysisResult.


        :param amr_ery: The amr_ery of this AnalysisResult.
        :type amr_ery: Resistance
        """

        self._amr_ery = amr_ery

    @property
    def amr_fus(self):
        """Gets the amr_fus of this AnalysisResult.


        :return: The amr_fus of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_fus

    @amr_fus.setter
    def amr_fus(self, amr_fus):
        """Sets the amr_fus of this AnalysisResult.


        :param amr_fus: The amr_fus of this AnalysisResult.
        :type amr_fus: Resistance
        """

        self._amr_fus = amr_fus

    @property
    def amr_gen(self):
        """Gets the amr_gen of this AnalysisResult.


        :return: The amr_gen of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_gen

    @amr_gen.setter
    def amr_gen(self, amr_gen):
        """Sets the amr_gen of this AnalysisResult.


        :param amr_gen: The amr_gen of this AnalysisResult.
        :type amr_gen: Resistance
        """

        self._amr_gen = amr_gen

    @property
    def amr_imi(self):
        """Gets the amr_imi of this AnalysisResult.


        :return: The amr_imi of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_imi

    @amr_imi.setter
    def amr_imi(self, amr_imi):
        """Sets the amr_imi of this AnalysisResult.


        :param amr_imi: The amr_imi of this AnalysisResult.
        :type amr_imi: Resistance
        """

        self._amr_imi = amr_imi

    @property
    def amr_kan(self):
        """Gets the amr_kan of this AnalysisResult.


        :return: The amr_kan of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_kan

    @amr_kan.setter
    def amr_kan(self, amr_kan):
        """Sets the amr_kan of this AnalysisResult.


        :param amr_kan: The amr_kan of this AnalysisResult.
        :type amr_kan: Resistance
        """

        self._amr_kan = amr_kan

    @property
    def amr_lzd(self):
        """Gets the amr_lzd of this AnalysisResult.


        :return: The amr_lzd of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_lzd

    @amr_lzd.setter
    def amr_lzd(self, amr_lzd):
        """Sets the amr_lzd of this AnalysisResult.


        :param amr_lzd: The amr_lzd of this AnalysisResult.
        :type amr_lzd: Resistance
        """

        self._amr_lzd = amr_lzd

    @property
    def amr_mero(self):
        """Gets the amr_mero of this AnalysisResult.


        :return: The amr_mero of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_mero

    @amr_mero.setter
    def amr_mero(self, amr_mero):
        """Sets the amr_mero of this AnalysisResult.


        :param amr_mero: The amr_mero of this AnalysisResult.
        :type amr_mero: Resistance
        """

        self._amr_mero = amr_mero

    @property
    def amr_mup(self):
        """Gets the amr_mup of this AnalysisResult.


        :return: The amr_mup of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_mup

    @amr_mup.setter
    def amr_mup(self, amr_mup):
        """Sets the amr_mup of this AnalysisResult.


        :param amr_mup: The amr_mup of this AnalysisResult.
        :type amr_mup: Resistance
        """

        self._amr_mup = amr_mup

    @property
    def amr_nal(self):
        """Gets the amr_nal of this AnalysisResult.


        :return: The amr_nal of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_nal

    @amr_nal.setter
    def amr_nal(self, amr_nal):
        """Sets the amr_nal of this AnalysisResult.


        :param amr_nal: The amr_nal of this AnalysisResult.
        :type amr_nal: Resistance
        """

        self._amr_nal = amr_nal

    @property
    def amr_pen(self):
        """Gets the amr_pen of this AnalysisResult.


        :return: The amr_pen of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_pen

    @amr_pen.setter
    def amr_pen(self, amr_pen):
        """Sets the amr_pen of this AnalysisResult.


        :param amr_pen: The amr_pen of this AnalysisResult.
        :type amr_pen: Resistance
        """

        self._amr_pen = amr_pen

    @property
    def amr_syn(self):
        """Gets the amr_syn of this AnalysisResult.


        :return: The amr_syn of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_syn

    @amr_syn.setter
    def amr_syn(self, amr_syn):
        """Sets the amr_syn of this AnalysisResult.


        :param amr_syn: The amr_syn of this AnalysisResult.
        :type amr_syn: Resistance
        """

        self._amr_syn = amr_syn

    @property
    def amr_rif(self):
        """Gets the amr_rif of this AnalysisResult.


        :return: The amr_rif of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_rif

    @amr_rif.setter
    def amr_rif(self, amr_rif):
        """Sets the amr_rif of this AnalysisResult.


        :param amr_rif: The amr_rif of this AnalysisResult.
        :type amr_rif: Resistance
        """

        self._amr_rif = amr_rif

    @property
    def amr_str(self):
        """Gets the amr_str of this AnalysisResult.


        :return: The amr_str of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_str

    @amr_str.setter
    def amr_str(self, amr_str):
        """Sets the amr_str of this AnalysisResult.


        :param amr_str: The amr_str of this AnalysisResult.
        :type amr_str: Resistance
        """

        self._amr_str = amr_str

    @property
    def amr_sul(self):
        """Gets the amr_sul of this AnalysisResult.


        :return: The amr_sul of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_sul

    @amr_sul.setter
    def amr_sul(self, amr_sul):
        """Sets the amr_sul of this AnalysisResult.


        :param amr_sul: The amr_sul of this AnalysisResult.
        :type amr_sul: Resistance
        """

        self._amr_sul = amr_sul

    @property
    def amr_tei(self):
        """Gets the amr_tei of this AnalysisResult.


        :return: The amr_tei of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_tei

    @amr_tei.setter
    def amr_tei(self, amr_tei):
        """Sets the amr_tei of this AnalysisResult.


        :param amr_tei: The amr_tei of this AnalysisResult.
        :type amr_tei: Resistance
        """

        self._amr_tei = amr_tei

    @property
    def amr_trm(self):
        """Gets the amr_trm of this AnalysisResult.


        :return: The amr_trm of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_trm

    @amr_trm.setter
    def amr_trm(self, amr_trm):
        """Sets the amr_trm of this AnalysisResult.


        :param amr_trm: The amr_trm of this AnalysisResult.
        :type amr_trm: Resistance
        """

        self._amr_trm = amr_trm

    @property
    def amr_tet(self):
        """Gets the amr_tet of this AnalysisResult.


        :return: The amr_tet of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_tet

    @amr_tet.setter
    def amr_tet(self, amr_tet):
        """Sets the amr_tet of this AnalysisResult.


        :param amr_tet: The amr_tet of this AnalysisResult.
        :type amr_tet: Resistance
        """

        self._amr_tet = amr_tet

    @property
    def amr_tia(self):
        """Gets the amr_tia of this AnalysisResult.


        :return: The amr_tia of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_tia

    @amr_tia.setter
    def amr_tia(self, amr_tia):
        """Sets the amr_tia of this AnalysisResult.


        :param amr_tia: The amr_tia of this AnalysisResult.
        :type amr_tia: Resistance
        """

        self._amr_tia = amr_tia

    @property
    def amr_tgc(self):
        """Gets the amr_tgc of this AnalysisResult.


        :return: The amr_tgc of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_tgc

    @amr_tgc.setter
    def amr_tgc(self, amr_tgc):
        """Sets the amr_tgc of this AnalysisResult.


        :param amr_tgc: The amr_tgc of this AnalysisResult.
        :type amr_tgc: Resistance
        """

        self._amr_tgc = amr_tgc

    @property
    def amr_tmp(self):
        """Gets the amr_tmp of this AnalysisResult.


        :return: The amr_tmp of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_tmp

    @amr_tmp.setter
    def amr_tmp(self, amr_tmp):
        """Sets the amr_tmp of this AnalysisResult.


        :param amr_tmp: The amr_tmp of this AnalysisResult.
        :type amr_tmp: Resistance
        """

        self._amr_tmp = amr_tmp

    @property
    def amr_van(self):
        """Gets the amr_van of this AnalysisResult.


        :return: The amr_van of this AnalysisResult.
        :rtype: Resistance
        """
        return self._amr_van

    @amr_van.setter
    def amr_van(self, amr_van):
        """Sets the amr_van of this AnalysisResult.


        :param amr_van: The amr_van of this AnalysisResult.
        :type amr_van: Resistance
        """

        self._amr_van = amr_van

    @property
    def cgmlst_schema(self):
        """Gets the cgmlst_schema of this AnalysisResult.


        :return: The cgmlst_schema of this AnalysisResult.
        :rtype: object
        """
        return self._cgmlst_schema

    @cgmlst_schema.setter
    def cgmlst_schema(self, cgmlst_schema):
        """Sets the cgmlst_schema of this AnalysisResult.


        :param cgmlst_schema: The cgmlst_schema of this AnalysisResult.
        :type cgmlst_schema: object
        """

        self._cgmlst_schema = cgmlst_schema

    @property
    def trst(self):
        """Gets the trst of this AnalysisResult.


        :return: The trst of this AnalysisResult.
        :rtype: str
        """
        return self._trst

    @trst.setter
    def trst(self, trst):
        """Sets the trst of this AnalysisResult.


        :param trst: The trst of this AnalysisResult.
        :type trst: str
        """

        self._trst = trst

    @property
    def tcda(self):
        """Gets the tcda of this AnalysisResult.


        :return: The tcda of this AnalysisResult.
        :rtype: str
        """
        return self._tcda

    @tcda.setter
    def tcda(self, tcda):
        """Sets the tcda of this AnalysisResult.


        :param tcda: The tcda of this AnalysisResult.
        :type tcda: str
        """

        self._tcda = tcda

    @property
    def tcdb(self):
        """Gets the tcdb of this AnalysisResult.


        :return: The tcdb of this AnalysisResult.
        :rtype: str
        """
        return self._tcdb

    @tcdb.setter
    def tcdb(self, tcdb):
        """Sets the tcdb of this AnalysisResult.


        :param tcdb: The tcdb of this AnalysisResult.
        :type tcdb: str
        """

        self._tcdb = tcdb

    @property
    def cdta_cdtb(self):
        """Gets the cdta_cdtb of this AnalysisResult.


        :return: The cdta_cdtb of this AnalysisResult.
        :rtype: str
        """
        return self._cdta_cdtb

    @cdta_cdtb.setter
    def cdta_cdtb(self, cdta_cdtb):
        """Sets the cdta_cdtb of this AnalysisResult.


        :param cdta_cdtb: The cdta_cdtb of this AnalysisResult.
        :type cdta_cdtb: str
        """

        self._cdta_cdtb = cdta_cdtb

    @property
    def del_117(self):
        """Gets the del_117 of this AnalysisResult.


        :return: The del_117 of this AnalysisResult.
        :rtype: str
        """
        return self._del_117

    @del_117.setter
    def del_117(self, del_117):
        """Sets the del_117 of this AnalysisResult.


        :param del_117: The del_117 of this AnalysisResult.
        :type del_117: str
        """

        self._del_117 = del_117

    @property
    def a117t(self):
        """Gets the a117t of this AnalysisResult.


        :return: The a117t of this AnalysisResult.
        :rtype: str
        """
        return self._a117t

    @a117t.setter
    def a117t(self, a117t):
        """Sets the a117t of this AnalysisResult.


        :param a117t: The a117t of this AnalysisResult.
        :type a117t: str
        """

        self._a117t = a117t

    @property
    def cdiff_details(self):
        """Gets the cdiff_details of this AnalysisResult.


        :return: The cdiff_details of this AnalysisResult.
        :rtype: str
        """
        return self._cdiff_details

    @cdiff_details.setter
    def cdiff_details(self, cdiff_details):
        """Sets the cdiff_details of this AnalysisResult.


        :param cdiff_details: The cdiff_details of this AnalysisResult.
        :type cdiff_details: str
        """

        self._cdiff_details = cdiff_details

    @property
    def adhaesion(self):
        """Gets the adhaesion of this AnalysisResult.


        :return: The adhaesion of this AnalysisResult.
        :rtype: str
        """
        return self._adhaesion

    @adhaesion.setter
    def adhaesion(self, adhaesion):
        """Sets the adhaesion of this AnalysisResult.


        :param adhaesion: The adhaesion of this AnalysisResult.
        :type adhaesion: str
        """

        self._adhaesion = adhaesion

    @property
    def toxin(self):
        """Gets the toxin of this AnalysisResult.


        :return: The toxin of this AnalysisResult.
        :rtype: str
        """
        return self._toxin

    @toxin.setter
    def toxin(self, toxin):
        """Sets the toxin of this AnalysisResult.


        :param toxin: The toxin of this AnalysisResult.
        :type toxin: str
        """

        self._toxin = toxin

    @property
    def toxin_details(self):
        """Gets the toxin_details of this AnalysisResult.


        :return: The toxin_details of this AnalysisResult.
        :rtype: str
        """
        return self._toxin_details

    @toxin_details.setter
    def toxin_details(self, toxin_details):
        """Sets the toxin_details of this AnalysisResult.


        :param toxin_details: The toxin_details of this AnalysisResult.
        :type toxin_details: str
        """

        self._toxin_details = toxin_details

    @property
    def bifrost_min_read_check(self):
        """Gets the bifrost_min_read_check of this AnalysisResult.


        :return: The bifrost_min_read_check of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_min_read_check

    @bifrost_min_read_check.setter
    def bifrost_min_read_check(self, bifrost_min_read_check):
        """Sets the bifrost_min_read_check of this AnalysisResult.


        :param bifrost_min_read_check: The bifrost_min_read_check of this AnalysisResult.
        :type bifrost_min_read_check: str
        """

        self._bifrost_min_read_check = bifrost_min_read_check

    @property
    def bifrost_whats_my_species(self):
        """Gets the bifrost_whats_my_species of this AnalysisResult.


        :return: The bifrost_whats_my_species of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_whats_my_species

    @bifrost_whats_my_species.setter
    def bifrost_whats_my_species(self, bifrost_whats_my_species):
        """Sets the bifrost_whats_my_species of this AnalysisResult.


        :param bifrost_whats_my_species: The bifrost_whats_my_species of this AnalysisResult.
        :type bifrost_whats_my_species: str
        """

        self._bifrost_whats_my_species = bifrost_whats_my_species

    @property
    def bifrost_assemblatron(self):
        """Gets the bifrost_assemblatron of this AnalysisResult.


        :return: The bifrost_assemblatron of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_assemblatron

    @bifrost_assemblatron.setter
    def bifrost_assemblatron(self, bifrost_assemblatron):
        """Sets the bifrost_assemblatron of this AnalysisResult.


        :param bifrost_assemblatron: The bifrost_assemblatron of this AnalysisResult.
        :type bifrost_assemblatron: str
        """

        self._bifrost_assemblatron = bifrost_assemblatron

    @property
    def bifrost_assembly_qc(self):
        """Gets the bifrost_assembly_qc of this AnalysisResult.


        :return: The bifrost_assembly_qc of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_assembly_qc

    @bifrost_assembly_qc.setter
    def bifrost_assembly_qc(self, bifrost_assembly_qc):
        """Sets the bifrost_assembly_qc of this AnalysisResult.


        :param bifrost_assembly_qc: The bifrost_assembly_qc of this AnalysisResult.
        :type bifrost_assembly_qc: str
        """

        self._bifrost_assembly_qc = bifrost_assembly_qc

    @property
    def bifrost_ssi_stamper(self):
        """Gets the bifrost_ssi_stamper of this AnalysisResult.


        :return: The bifrost_ssi_stamper of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_ssi_stamper

    @bifrost_ssi_stamper.setter
    def bifrost_ssi_stamper(self, bifrost_ssi_stamper):
        """Sets the bifrost_ssi_stamper of this AnalysisResult.


        :param bifrost_ssi_stamper: The bifrost_ssi_stamper of this AnalysisResult.
        :type bifrost_ssi_stamper: str
        """

        self._bifrost_ssi_stamper = bifrost_ssi_stamper

    @property
    def bifrost_cge_mlst(self):
        """Gets the bifrost_cge_mlst of this AnalysisResult.


        :return: The bifrost_cge_mlst of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_cge_mlst

    @bifrost_cge_mlst.setter
    def bifrost_cge_mlst(self, bifrost_cge_mlst):
        """Sets the bifrost_cge_mlst of this AnalysisResult.


        :param bifrost_cge_mlst: The bifrost_cge_mlst of this AnalysisResult.
        :type bifrost_cge_mlst: str
        """

        self._bifrost_cge_mlst = bifrost_cge_mlst

    @property
    def bifrost_cge_resfinder(self):
        """Gets the bifrost_cge_resfinder of this AnalysisResult.


        :return: The bifrost_cge_resfinder of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_cge_resfinder

    @bifrost_cge_resfinder.setter
    def bifrost_cge_resfinder(self, bifrost_cge_resfinder):
        """Sets the bifrost_cge_resfinder of this AnalysisResult.


        :param bifrost_cge_resfinder: The bifrost_cge_resfinder of this AnalysisResult.
        :type bifrost_cge_resfinder: str
        """

        self._bifrost_cge_resfinder = bifrost_cge_resfinder

    @property
    def bifrost_seqsero(self):
        """Gets the bifrost_seqsero of this AnalysisResult.


        :return: The bifrost_seqsero of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_seqsero

    @bifrost_seqsero.setter
    def bifrost_seqsero(self, bifrost_seqsero):
        """Sets the bifrost_seqsero of this AnalysisResult.


        :param bifrost_seqsero: The bifrost_seqsero of this AnalysisResult.
        :type bifrost_seqsero: str
        """

        self._bifrost_seqsero = bifrost_seqsero

    @property
    def bifrost_enterobase(self):
        """Gets the bifrost_enterobase of this AnalysisResult.


        :return: The bifrost_enterobase of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_enterobase

    @bifrost_enterobase.setter
    def bifrost_enterobase(self, bifrost_enterobase):
        """Sets the bifrost_enterobase of this AnalysisResult.


        :param bifrost_enterobase: The bifrost_enterobase of this AnalysisResult.
        :type bifrost_enterobase: str
        """

        self._bifrost_enterobase = bifrost_enterobase

    @property
    def bifrost_salmonella_subspecies_dtartrate(self):
        """Gets the bifrost_salmonella_subspecies_dtartrate of this AnalysisResult.


        :return: The bifrost_salmonella_subspecies_dtartrate of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_salmonella_subspecies_dtartrate

    @bifrost_salmonella_subspecies_dtartrate.setter
    def bifrost_salmonella_subspecies_dtartrate(self, bifrost_salmonella_subspecies_dtartrate):
        """Sets the bifrost_salmonella_subspecies_dtartrate of this AnalysisResult.


        :param bifrost_salmonella_subspecies_dtartrate: The bifrost_salmonella_subspecies_dtartrate of this AnalysisResult.
        :type bifrost_salmonella_subspecies_dtartrate: str
        """

        self._bifrost_salmonella_subspecies_dtartrate = bifrost_salmonella_subspecies_dtartrate

    @property
    def bifrost_chewbbaca(self):
        """Gets the bifrost_chewbbaca of this AnalysisResult.


        :return: The bifrost_chewbbaca of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_chewbbaca

    @bifrost_chewbbaca.setter
    def bifrost_chewbbaca(self, bifrost_chewbbaca):
        """Sets the bifrost_chewbbaca of this AnalysisResult.


        :param bifrost_chewbbaca: The bifrost_chewbbaca of this AnalysisResult.
        :type bifrost_chewbbaca: str
        """

        self._bifrost_chewbbaca = bifrost_chewbbaca

    @property
    def bifrost_sp_ecoli(self):
        """Gets the bifrost_sp_ecoli of this AnalysisResult.


        :return: The bifrost_sp_ecoli of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_sp_ecoli

    @bifrost_sp_ecoli.setter
    def bifrost_sp_ecoli(self, bifrost_sp_ecoli):
        """Sets the bifrost_sp_ecoli of this AnalysisResult.


        :param bifrost_sp_ecoli: The bifrost_sp_ecoli of this AnalysisResult.
        :type bifrost_sp_ecoli: str
        """

        self._bifrost_sp_ecoli = bifrost_sp_ecoli

    @property
    def bifrost_sp_cdiff(self):
        """Gets the bifrost_sp_cdiff of this AnalysisResult.


        :return: The bifrost_sp_cdiff of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_sp_cdiff

    @bifrost_sp_cdiff.setter
    def bifrost_sp_cdiff(self, bifrost_sp_cdiff):
        """Sets the bifrost_sp_cdiff of this AnalysisResult.


        :param bifrost_sp_cdiff: The bifrost_sp_cdiff of this AnalysisResult.
        :type bifrost_sp_cdiff: str
        """

        self._bifrost_sp_cdiff = bifrost_sp_cdiff

    @property
    def bifrost_amrfinderplus(self):
        """Gets the bifrost_amrfinderplus of this AnalysisResult.


        :return: The bifrost_amrfinderplus of this AnalysisResult.
        :rtype: str
        """
        return self._bifrost_amrfinderplus

    @bifrost_amrfinderplus.setter
    def bifrost_amrfinderplus(self, bifrost_amrfinderplus):
        """Sets the bifrost_amrfinderplus of this AnalysisResult.


        :param bifrost_amrfinderplus: The bifrost_amrfinderplus of this AnalysisResult.
        :type bifrost_amrfinderplus: str
        """

        self._bifrost_amrfinderplus = bifrost_amrfinderplus
