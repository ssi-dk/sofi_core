# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated.models.base_metadata import BaseMetadata
from web.src.SAP.generated.models.lims_specific_metadata import LimsSpecificMetadata
from web.src.SAP.generated.models.organization import Organization
from web.src.SAP.generated import util

from web.src.SAP.generated.models.base_metadata import BaseMetadata  # noqa: E501
from web.src.SAP.generated.models.lims_specific_metadata import LimsSpecificMetadata  # noqa: E501
from web.src.SAP.generated.models.organization import Organization  # noqa: E501

class LimsMetadata(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, id=None, sequence_id=None, sequence_filename=None, isolate_id=None, institution=None, project_number=None, project_title=None, date_sample=None, date_received=None, date_sofi=None, run_id=None, public_number=None, primary_isolate=None, chr_number=None, cvr_number=None, aut_number=None, product_type=None, product=None, origin_country=None, animal_species=None, sample_info=None):  # noqa: E501
        """LimsMetadata - a model defined in OpenAPI

        :param id: The id of this LimsMetadata.  # noqa: E501
        :type id: str
        :param sequence_id: The sequence_id of this LimsMetadata.  # noqa: E501
        :type sequence_id: str
        :param sequence_filename: The sequence_filename of this LimsMetadata.  # noqa: E501
        :type sequence_filename: str
        :param isolate_id: The isolate_id of this LimsMetadata.  # noqa: E501
        :type isolate_id: str
        :param institution: The institution of this LimsMetadata.  # noqa: E501
        :type institution: Organization
        :param project_number: The project_number of this LimsMetadata.  # noqa: E501
        :type project_number: str
        :param project_title: The project_title of this LimsMetadata.  # noqa: E501
        :type project_title: str
        :param date_sample: The date_sample of this LimsMetadata.  # noqa: E501
        :type date_sample: datetime
        :param date_received: The date_received of this LimsMetadata.  # noqa: E501
        :type date_received: datetime
        :param date_sofi: The date_sofi of this LimsMetadata.  # noqa: E501
        :type date_sofi: datetime
        :param run_id: The run_id of this LimsMetadata.  # noqa: E501
        :type run_id: str
        :param public_number: The public_number of this LimsMetadata.  # noqa: E501
        :type public_number: str
        :param primary_isolate: The primary_isolate of this LimsMetadata.  # noqa: E501
        :type primary_isolate: bool
        :param chr_number: The chr_number of this LimsMetadata.  # noqa: E501
        :type chr_number: str
        :param cvr_number: The cvr_number of this LimsMetadata.  # noqa: E501
        :type cvr_number: str
        :param aut_number: The aut_number of this LimsMetadata.  # noqa: E501
        :type aut_number: str
        :param product_type: The product_type of this LimsMetadata.  # noqa: E501
        :type product_type: str
        :param product: The product of this LimsMetadata.  # noqa: E501
        :type product: str
        :param origin_country: The origin_country of this LimsMetadata.  # noqa: E501
        :type origin_country: str
        :param animal_species: The animal_species of this LimsMetadata.  # noqa: E501
        :type animal_species: str
        :param sample_info: The sample_info of this LimsMetadata.  # noqa: E501
        :type sample_info: str
        """
        self.openapi_types = {
            'id': str,
            'sequence_id': str,
            'sequence_filename': str,
            'isolate_id': str,
            'institution': Organization,
            'project_number': str,
            'project_title': str,
            'date_sample': datetime,
            'date_received': datetime,
            'date_sofi': datetime,
            'run_id': str,
            'public_number': str,
            'primary_isolate': bool,
            'chr_number': str,
            'cvr_number': str,
            'aut_number': str,
            'product_type': str,
            'product': str,
            'origin_country': str,
            'animal_species': str,
            'sample_info': str,
        }

        self.attribute_map = {
            'id': 'id',
            'sequence_id': 'sequence_id',
            'sequence_filename': 'sequence_filename',
            'isolate_id': 'isolate_id',
            'institution': 'institution',
            'project_number': 'project_number',
            'project_title': 'project_title',
            'date_sample': 'date_sample',
            'date_received': 'date_received',
            'date_sofi': 'date_sofi',
            'run_id': 'run_id',
            'public_number': 'public_number',
            'primary_isolate': 'primary_isolate',
            'chr_number': 'chr_number',
            'cvr_number': 'cvr_number',
            'aut_number': 'aut_number',
            'product_type': 'product_type',
            'product': 'product',
            'origin_country': 'origin_country',
            'animal_species': 'animal_species',
            'sample_info': 'sample_info',
        }

        self._id = id
        self._sequence_id = sequence_id
        self._sequence_filename = sequence_filename
        self._isolate_id = isolate_id
        self._institution = institution
        self._project_number = project_number
        self._project_title = project_title
        self._date_sample = date_sample
        self._date_received = date_received
        self._date_sofi = date_sofi
        self._run_id = run_id
        self._public_number = public_number
        self._primary_isolate = primary_isolate
        self._chr_number = chr_number
        self._cvr_number = cvr_number
        self._aut_number = aut_number
        self._product_type = product_type
        self._product = product
        self._origin_country = origin_country
        self._animal_species = animal_species
        self._sample_info = sample_info

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LimsMetadata of this LimsMetadata.  # noqa: E501
        :rtype: LimsMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LimsMetadata.


        :return: The id of this LimsMetadata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LimsMetadata.


        :param id: The id of this LimsMetadata.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sequence_id(self):
        """Gets the sequence_id of this LimsMetadata.


        :return: The sequence_id of this LimsMetadata.
        :rtype: str
        """
        return self._sequence_id

    @sequence_id.setter
    def sequence_id(self, sequence_id):
        """Sets the sequence_id of this LimsMetadata.


        :param sequence_id: The sequence_id of this LimsMetadata.
        :type sequence_id: str
        """
        if sequence_id is None:
            raise ValueError("Invalid value for `sequence_id`, must not be `None`")  # noqa: E501

        self._sequence_id = sequence_id

    @property
    def sequence_filename(self):
        """Gets the sequence_filename of this LimsMetadata.


        :return: The sequence_filename of this LimsMetadata.
        :rtype: str
        """
        return self._sequence_filename

    @sequence_filename.setter
    def sequence_filename(self, sequence_filename):
        """Sets the sequence_filename of this LimsMetadata.


        :param sequence_filename: The sequence_filename of this LimsMetadata.
        :type sequence_filename: str
        """

        self._sequence_filename = sequence_filename

    @property
    def isolate_id(self):
        """Gets the isolate_id of this LimsMetadata.


        :return: The isolate_id of this LimsMetadata.
        :rtype: str
        """
        return self._isolate_id

    @isolate_id.setter
    def isolate_id(self, isolate_id):
        """Sets the isolate_id of this LimsMetadata.


        :param isolate_id: The isolate_id of this LimsMetadata.
        :type isolate_id: str
        """
        if isolate_id is None:
            raise ValueError("Invalid value for `isolate_id`, must not be `None`")  # noqa: E501

        self._isolate_id = isolate_id

    @property
    def institution(self):
        """Gets the institution of this LimsMetadata.


        :return: The institution of this LimsMetadata.
        :rtype: Organization
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this LimsMetadata.


        :param institution: The institution of this LimsMetadata.
        :type institution: Organization
        """
        if institution is None:
            raise ValueError("Invalid value for `institution`, must not be `None`")  # noqa: E501

        self._institution = institution

    @property
    def project_number(self):
        """Gets the project_number of this LimsMetadata.


        :return: The project_number of this LimsMetadata.
        :rtype: str
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this LimsMetadata.


        :param project_number: The project_number of this LimsMetadata.
        :type project_number: str
        """

        self._project_number = project_number

    @property
    def project_title(self):
        """Gets the project_title of this LimsMetadata.


        :return: The project_title of this LimsMetadata.
        :rtype: str
        """
        return self._project_title

    @project_title.setter
    def project_title(self, project_title):
        """Sets the project_title of this LimsMetadata.


        :param project_title: The project_title of this LimsMetadata.
        :type project_title: str
        """

        self._project_title = project_title

    @property
    def date_sample(self):
        """Gets the date_sample of this LimsMetadata.


        :return: The date_sample of this LimsMetadata.
        :rtype: datetime
        """
        return self._date_sample

    @date_sample.setter
    def date_sample(self, date_sample):
        """Sets the date_sample of this LimsMetadata.


        :param date_sample: The date_sample of this LimsMetadata.
        :type date_sample: datetime
        """

        self._date_sample = date_sample

    @property
    def date_received(self):
        """Gets the date_received of this LimsMetadata.


        :return: The date_received of this LimsMetadata.
        :rtype: datetime
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """Sets the date_received of this LimsMetadata.


        :param date_received: The date_received of this LimsMetadata.
        :type date_received: datetime
        """
        if date_received is None:
            raise ValueError("Invalid value for `date_received`, must not be `None`")  # noqa: E501

        self._date_received = date_received

    @property
    def date_sofi(self):
        """Gets the date_sofi of this LimsMetadata.


        :return: The date_sofi of this LimsMetadata.
        :rtype: datetime
        """
        return self._date_sofi

    @date_sofi.setter
    def date_sofi(self, date_sofi):
        """Sets the date_sofi of this LimsMetadata.


        :param date_sofi: The date_sofi of this LimsMetadata.
        :type date_sofi: datetime
        """

        self._date_sofi = date_sofi

    @property
    def run_id(self):
        """Gets the run_id of this LimsMetadata.


        :return: The run_id of this LimsMetadata.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this LimsMetadata.


        :param run_id: The run_id of this LimsMetadata.
        :type run_id: str
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")  # noqa: E501

        self._run_id = run_id

    @property
    def public_number(self):
        """Gets the public_number of this LimsMetadata.


        :return: The public_number of this LimsMetadata.
        :rtype: str
        """
        return self._public_number

    @public_number.setter
    def public_number(self, public_number):
        """Sets the public_number of this LimsMetadata.


        :param public_number: The public_number of this LimsMetadata.
        :type public_number: str
        """

        self._public_number = public_number

    @property
    def primary_isolate(self):
        """Gets the primary_isolate of this LimsMetadata.


        :return: The primary_isolate of this LimsMetadata.
        :rtype: bool
        """
        return self._primary_isolate

    @primary_isolate.setter
    def primary_isolate(self, primary_isolate):
        """Sets the primary_isolate of this LimsMetadata.


        :param primary_isolate: The primary_isolate of this LimsMetadata.
        :type primary_isolate: bool
        """
        if primary_isolate is None:
            raise ValueError("Invalid value for `primary_isolate`, must not be `None`")  # noqa: E501

        self._primary_isolate = primary_isolate

    @property
    def chr_number(self):
        """Gets the chr_number of this LimsMetadata.


        :return: The chr_number of this LimsMetadata.
        :rtype: str
        """
        return self._chr_number

    @chr_number.setter
    def chr_number(self, chr_number):
        """Sets the chr_number of this LimsMetadata.


        :param chr_number: The chr_number of this LimsMetadata.
        :type chr_number: str
        """

        self._chr_number = chr_number

    @property
    def cvr_number(self):
        """Gets the cvr_number of this LimsMetadata.


        :return: The cvr_number of this LimsMetadata.
        :rtype: str
        """
        return self._cvr_number

    @cvr_number.setter
    def cvr_number(self, cvr_number):
        """Sets the cvr_number of this LimsMetadata.


        :param cvr_number: The cvr_number of this LimsMetadata.
        :type cvr_number: str
        """

        self._cvr_number = cvr_number

    @property
    def aut_number(self):
        """Gets the aut_number of this LimsMetadata.


        :return: The aut_number of this LimsMetadata.
        :rtype: str
        """
        return self._aut_number

    @aut_number.setter
    def aut_number(self, aut_number):
        """Sets the aut_number of this LimsMetadata.


        :param aut_number: The aut_number of this LimsMetadata.
        :type aut_number: str
        """

        self._aut_number = aut_number

    @property
    def product_type(self):
        """Gets the product_type of this LimsMetadata.


        :return: The product_type of this LimsMetadata.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this LimsMetadata.


        :param product_type: The product_type of this LimsMetadata.
        :type product_type: str
        """

        self._product_type = product_type

    @property
    def product(self):
        """Gets the product of this LimsMetadata.


        :return: The product of this LimsMetadata.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this LimsMetadata.


        :param product: The product of this LimsMetadata.
        :type product: str
        """

        self._product = product

    @property
    def origin_country(self):
        """Gets the origin_country of this LimsMetadata.


        :return: The origin_country of this LimsMetadata.
        :rtype: str
        """
        return self._origin_country

    @origin_country.setter
    def origin_country(self, origin_country):
        """Sets the origin_country of this LimsMetadata.


        :param origin_country: The origin_country of this LimsMetadata.
        :type origin_country: str
        """

        self._origin_country = origin_country

    @property
    def animal_species(self):
        """Gets the animal_species of this LimsMetadata.


        :return: The animal_species of this LimsMetadata.
        :rtype: str
        """
        return self._animal_species

    @animal_species.setter
    def animal_species(self, animal_species):
        """Sets the animal_species of this LimsMetadata.


        :param animal_species: The animal_species of this LimsMetadata.
        :type animal_species: str
        """

        self._animal_species = animal_species

    @property
    def sample_info(self):
        """Gets the sample_info of this LimsMetadata.


        :return: The sample_info of this LimsMetadata.
        :rtype: str
        """
        return self._sample_info

    @sample_info.setter
    def sample_info(self, sample_info):
        """Sets the sample_info of this LimsMetadata.


        :param sample_info: The sample_info of this LimsMetadata.
        :type sample_info: str
        """

        self._sample_info = sample_info
